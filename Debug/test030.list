
test030.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bb0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08001c70  08001c70  00002c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ce8  08001ce8  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  08001ce8  08001ce8  00002ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001cf0  08001cf0  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cf0  08001cf0  00002cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001cf4  08001cf4  00002cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001cf8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08001d04  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001d04  00003030  2**0
                  ALLOC
 11 .ARM.attributes 0000002c  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024463  00000000  00000000  00003038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001af9  00000000  00000000  0002749b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001538  00000000  00000000  00028f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003db  00000000  00000000  0002a4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fafe  00000000  00000000  0002a8ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000257e8  00000000  00000000  0003a3a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094931  00000000  00000000  0005fb91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000006f  00000000  00000000  000f44c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e14  00000000  00000000  000f4534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000f9348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00015898  00000000  00000000  000f939f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000167  00000000  00000000  0010ec37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001c58 	.word	0x08001c58

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001c58 	.word	0x08001c58

08000108 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
 800010e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000110:	687b      	ldr	r3, [r7, #4]
 8000112:	681b      	ldr	r3, [r3, #0]
 8000114:	2201      	movs	r2, #1
 8000116:	431a      	orrs	r2, r3
 8000118:	687b      	ldr	r3, [r7, #4]
 800011a:	601a      	str	r2, [r3, #0]
}
 800011c:	46c0      	nop			@ (mov r8, r8)
 800011e:	46bd      	mov	sp, r7
 8000120:	b002      	add	sp, #8
 8000122:	bd80      	pop	{r7, pc}

08000124 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000124:	b580      	push	{r7, lr}
 8000126:	b082      	sub	sp, #8
 8000128:	af00      	add	r7, sp, #0
 800012a:	6078      	str	r0, [r7, #4]
    and HDSEL bits in the USART_CR3 register.
  */
#if defined(USART_LIN_SUPPORT)
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
 800012c:	687b      	ldr	r3, [r7, #4]
 800012e:	685b      	ldr	r3, [r3, #4]
 8000130:	4a07      	ldr	r2, [pc, #28]	@ (8000150 <LL_USART_ConfigAsyncMode+0x2c>)
 8000132:	401a      	ands	r2, r3
 8000134:	687b      	ldr	r3, [r7, #4]
 8000136:	605a      	str	r2, [r3, #4]
#endif /* USART_IRDA_SUPPORT */
#else
#if defined(USART_IRDA_SUPPORT)
  CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
#else
  CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8000138:	687b      	ldr	r3, [r7, #4]
 800013a:	689b      	ldr	r3, [r3, #8]
 800013c:	2208      	movs	r2, #8
 800013e:	4393      	bics	r3, r2
 8000140:	001a      	movs	r2, r3
 8000142:	687b      	ldr	r3, [r7, #4]
 8000144:	609a      	str	r2, [r3, #8]
#endif /* USART_IRDA_SUPPORT */
#endif /* USART_SMARTCARD_SUPPORT */
}
 8000146:	46c0      	nop			@ (mov r8, r8)
 8000148:	46bd      	mov	sp, r7
 800014a:	b002      	add	sp, #8
 800014c:	bd80      	pop	{r7, pc}
 800014e:	46c0      	nop			@ (mov r8, r8)
 8000150:	fffff7ff 	.word	0xfffff7ff

08000154 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8000154:	b580      	push	{r7, lr}
 8000156:	b086      	sub	sp, #24
 8000158:	af00      	add	r7, sp, #0
 800015a:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800015c:	f3ef 8310 	mrs	r3, PRIMASK
 8000160:	60bb      	str	r3, [r7, #8]
  return(result);
 8000162:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8000164:	617b      	str	r3, [r7, #20]
 8000166:	2301      	movs	r3, #1
 8000168:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	f383 8810 	msr	PRIMASK, r3
}
 8000170:	46c0      	nop			@ (mov r8, r8)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	689b      	ldr	r3, [r3, #8]
 8000176:	4a07      	ldr	r2, [pc, #28]	@ (8000194 <LL_USART_DisableIT_CTS+0x40>)
 8000178:	401a      	ands	r2, r3
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	609a      	str	r2, [r3, #8]
 800017e:	697b      	ldr	r3, [r7, #20]
 8000180:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000182:	693b      	ldr	r3, [r7, #16]
 8000184:	f383 8810 	msr	PRIMASK, r3
}
 8000188:	46c0      	nop			@ (mov r8, r8)
}
 800018a:	46c0      	nop			@ (mov r8, r8)
 800018c:	46bd      	mov	sp, r7
 800018e:	b006      	add	sp, #24
 8000190:	bd80      	pop	{r7, pc}
 8000192:	46c0      	nop			@ (mov r8, r8)
 8000194:	fffffbff 	.word	0xfffffbff

08000198 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000198:	b590      	push	{r4, r7, lr}
 800019a:	b083      	sub	sp, #12
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], SYSCFG_EXTICR1_EXTI0 << (Line >> 16), Port << (Line >> 16));
 80001a2:	4a0f      	ldr	r2, [pc, #60]	@ (80001e0 <LL_SYSCFG_SetEXTISource+0x48>)
 80001a4:	683b      	ldr	r3, [r7, #0]
 80001a6:	21ff      	movs	r1, #255	@ 0xff
 80001a8:	400b      	ands	r3, r1
 80001aa:	3302      	adds	r3, #2
 80001ac:	009b      	lsls	r3, r3, #2
 80001ae:	589b      	ldr	r3, [r3, r2]
 80001b0:	683a      	ldr	r2, [r7, #0]
 80001b2:	0c12      	lsrs	r2, r2, #16
 80001b4:	210f      	movs	r1, #15
 80001b6:	4091      	lsls	r1, r2
 80001b8:	000a      	movs	r2, r1
 80001ba:	43d2      	mvns	r2, r2
 80001bc:	401a      	ands	r2, r3
 80001be:	0011      	movs	r1, r2
 80001c0:	683b      	ldr	r3, [r7, #0]
 80001c2:	0c1b      	lsrs	r3, r3, #16
 80001c4:	687a      	ldr	r2, [r7, #4]
 80001c6:	409a      	lsls	r2, r3
 80001c8:	4805      	ldr	r0, [pc, #20]	@ (80001e0 <LL_SYSCFG_SetEXTISource+0x48>)
 80001ca:	683b      	ldr	r3, [r7, #0]
 80001cc:	24ff      	movs	r4, #255	@ 0xff
 80001ce:	4023      	ands	r3, r4
 80001d0:	430a      	orrs	r2, r1
 80001d2:	3302      	adds	r3, #2
 80001d4:	009b      	lsls	r3, r3, #2
 80001d6:	501a      	str	r2, [r3, r0]
}
 80001d8:	46c0      	nop			@ (mov r8, r8)
 80001da:	46bd      	mov	sp, r7
 80001dc:	b003      	add	sp, #12
 80001de:	bd90      	pop	{r4, r7, pc}
 80001e0:	40010000 	.word	0x40010000

080001e4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	60f8      	str	r0, [r7, #12]
 80001ec:	60b9      	str	r1, [r7, #8]
 80001ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	6819      	ldr	r1, [r3, #0]
 80001f4:	68bb      	ldr	r3, [r7, #8]
 80001f6:	435b      	muls	r3, r3
 80001f8:	001a      	movs	r2, r3
 80001fa:	0013      	movs	r3, r2
 80001fc:	005b      	lsls	r3, r3, #1
 80001fe:	189b      	adds	r3, r3, r2
 8000200:	43db      	mvns	r3, r3
 8000202:	400b      	ands	r3, r1
 8000204:	001a      	movs	r2, r3
 8000206:	68bb      	ldr	r3, [r7, #8]
 8000208:	435b      	muls	r3, r3
 800020a:	6879      	ldr	r1, [r7, #4]
 800020c:	434b      	muls	r3, r1
 800020e:	431a      	orrs	r2, r3
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	601a      	str	r2, [r3, #0]
}
 8000214:	46c0      	nop			@ (mov r8, r8)
 8000216:	46bd      	mov	sp, r7
 8000218:	b004      	add	sp, #16
 800021a:	bd80      	pop	{r7, pc}

0800021c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	68d9      	ldr	r1, [r3, #12]
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	435b      	muls	r3, r3
 8000230:	001a      	movs	r2, r3
 8000232:	0013      	movs	r3, r2
 8000234:	005b      	lsls	r3, r3, #1
 8000236:	189b      	adds	r3, r3, r2
 8000238:	43db      	mvns	r3, r3
 800023a:	400b      	ands	r3, r1
 800023c:	001a      	movs	r2, r3
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	435b      	muls	r3, r3
 8000242:	6879      	ldr	r1, [r7, #4]
 8000244:	434b      	muls	r3, r1
 8000246:	431a      	orrs	r2, r3
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	60da      	str	r2, [r3, #12]
}
 800024c:	46c0      	nop			@ (mov r8, r8)
 800024e:	46bd      	mov	sp, r7
 8000250:	b004      	add	sp, #16
 8000252:	bd80      	pop	{r7, pc}

08000254 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
 800025c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	683a      	ldr	r2, [r7, #0]
 8000262:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000264:	46c0      	nop			@ (mov r8, r8)
 8000266:	46bd      	mov	sp, r7
 8000268:	b002      	add	sp, #8
 800026a:	bd80      	pop	{r7, pc}

0800026c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000274:	4b07      	ldr	r3, [pc, #28]	@ (8000294 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000276:	6959      	ldr	r1, [r3, #20]
 8000278:	4b06      	ldr	r3, [pc, #24]	@ (8000294 <LL_AHB1_GRP1_EnableClock+0x28>)
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	430a      	orrs	r2, r1
 800027e:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000280:	4b04      	ldr	r3, [pc, #16]	@ (8000294 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000282:	695b      	ldr	r3, [r3, #20]
 8000284:	687a      	ldr	r2, [r7, #4]
 8000286:	4013      	ands	r3, r2
 8000288:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800028a:	68fb      	ldr	r3, [r7, #12]
}
 800028c:	46c0      	nop			@ (mov r8, r8)
 800028e:	46bd      	mov	sp, r7
 8000290:	b004      	add	sp, #16
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40021000 	.word	0x40021000

08000298 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80002a0:	4b07      	ldr	r3, [pc, #28]	@ (80002c0 <LL_APB1_GRP1_EnableClock+0x28>)
 80002a2:	69d9      	ldr	r1, [r3, #28]
 80002a4:	4b06      	ldr	r3, [pc, #24]	@ (80002c0 <LL_APB1_GRP1_EnableClock+0x28>)
 80002a6:	687a      	ldr	r2, [r7, #4]
 80002a8:	430a      	orrs	r2, r1
 80002aa:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80002ac:	4b04      	ldr	r3, [pc, #16]	@ (80002c0 <LL_APB1_GRP1_EnableClock+0x28>)
 80002ae:	69db      	ldr	r3, [r3, #28]
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	4013      	ands	r3, r2
 80002b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002b6:	68fb      	ldr	r3, [r7, #12]
}
 80002b8:	46c0      	nop			@ (mov r8, r8)
 80002ba:	46bd      	mov	sp, r7
 80002bc:	b004      	add	sp, #16
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	40021000 	.word	0x40021000

080002c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c8:	f000 f998 	bl	80005fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002cc:	f000 f808 	bl	80002e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d0:	f000 f8d0 	bl	8000474 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002d4:	f000 f850 	bl	8000378 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  extern void rs_main(void);
  rs_main();
 80002d8:	f001 fb3a 	bl	8001950 <rs_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002dc:	46c0      	nop			@ (mov r8, r8)
 80002de:	e7fd      	b.n	80002dc <main+0x18>

080002e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e0:	b590      	push	{r4, r7, lr}
 80002e2:	b091      	sub	sp, #68	@ 0x44
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	2410      	movs	r4, #16
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	0018      	movs	r0, r3
 80002ec:	2330      	movs	r3, #48	@ 0x30
 80002ee:	001a      	movs	r2, r3
 80002f0:	2100      	movs	r1, #0
 80002f2:	f001 fb77 	bl	80019e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f6:	003b      	movs	r3, r7
 80002f8:	0018      	movs	r0, r3
 80002fa:	2310      	movs	r3, #16
 80002fc:	001a      	movs	r2, r3
 80002fe:	2100      	movs	r1, #0
 8000300:	f001 fb70 	bl	80019e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000304:	0021      	movs	r1, r4
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2202      	movs	r2, #2
 800030a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2201      	movs	r2, #1
 8000310:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2210      	movs	r2, #16
 8000316:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2202      	movs	r2, #2
 800031c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2200      	movs	r2, #0
 8000322:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	22a0      	movs	r2, #160	@ 0xa0
 8000328:	0392      	lsls	r2, r2, #14
 800032a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2200      	movs	r2, #0
 8000330:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000332:	187b      	adds	r3, r7, r1
 8000334:	0018      	movs	r0, r3
 8000336:	f000 fa67 	bl	8000808 <HAL_RCC_OscConfig>
 800033a:	1e03      	subs	r3, r0, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800033e:	f000 f903 	bl	8000548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000342:	003b      	movs	r3, r7
 8000344:	2207      	movs	r2, #7
 8000346:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000348:	003b      	movs	r3, r7
 800034a:	2202      	movs	r2, #2
 800034c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034e:	003b      	movs	r3, r7
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000354:	003b      	movs	r3, r7
 8000356:	22a0      	movs	r2, #160	@ 0xa0
 8000358:	00d2      	lsls	r2, r2, #3
 800035a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800035c:	003b      	movs	r3, r7
 800035e:	2101      	movs	r1, #1
 8000360:	0018      	movs	r0, r3
 8000362:	f000 fd6b 	bl	8000e3c <HAL_RCC_ClockConfig>
 8000366:	1e03      	subs	r3, r0, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800036a:	f000 f8ed 	bl	8000548 <Error_Handler>
  }
}
 800036e:	46c0      	nop			@ (mov r8, r8)
 8000370:	46bd      	mov	sp, r7
 8000372:	b011      	add	sp, #68	@ 0x44
 8000374:	bd90      	pop	{r4, r7, pc}
	...

08000378 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000378:	b590      	push	{r4, r7, lr}
 800037a:	b08f      	sub	sp, #60	@ 0x3c
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800037e:	241c      	movs	r4, #28
 8000380:	193b      	adds	r3, r7, r4
 8000382:	0018      	movs	r0, r3
 8000384:	231c      	movs	r3, #28
 8000386:	001a      	movs	r2, r3
 8000388:	2100      	movs	r1, #0
 800038a:	f001 fb2b 	bl	80019e4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	0018      	movs	r0, r3
 8000392:	2318      	movs	r3, #24
 8000394:	001a      	movs	r2, r3
 8000396:	2100      	movs	r1, #0
 8000398:	f001 fb24 	bl	80019e4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800039c:	2380      	movs	r3, #128	@ 0x80
 800039e:	029b      	lsls	r3, r3, #10
 80003a0:	0018      	movs	r0, r3
 80003a2:	f7ff ff79 	bl	8000298 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80003a6:	2380      	movs	r3, #128	@ 0x80
 80003a8:	029b      	lsls	r3, r3, #10
 80003aa:	0018      	movs	r0, r3
 80003ac:	f7ff ff5e 	bl	800026c <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2204      	movs	r2, #4
 80003b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	2202      	movs	r2, #2
 80003ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	2200      	movs	r2, #0
 80003c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2200      	movs	r2, #0
 80003c6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2201      	movs	r2, #1
 80003d2:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 80003d4:	1d3a      	adds	r2, r7, #4
 80003d6:	2390      	movs	r3, #144	@ 0x90
 80003d8:	05db      	lsls	r3, r3, #23
 80003da:	0011      	movs	r1, r2
 80003dc:	0018      	movs	r0, r3
 80003de:	f001 f819 	bl	8001414 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = USART_RX_Pin;
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2208      	movs	r2, #8
 80003e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2202      	movs	r2, #2
 80003ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2201      	movs	r2, #1
 8000404:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8000406:	1d3a      	adds	r2, r7, #4
 8000408:	2390      	movs	r3, #144	@ 0x90
 800040a:	05db      	lsls	r3, r3, #23
 800040c:	0011      	movs	r1, r2
 800040e:	0018      	movs	r0, r3
 8000410:	f001 f800 	bl	8001414 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 8000414:	193b      	adds	r3, r7, r4
 8000416:	2296      	movs	r2, #150	@ 0x96
 8000418:	0212      	lsls	r2, r2, #8
 800041a:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800041c:	0021      	movs	r1, r4
 800041e:	187b      	adds	r3, r7, r1
 8000420:	2200      	movs	r2, #0
 8000422:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000424:	187b      	adds	r3, r7, r1
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800042a:	187b      	adds	r3, r7, r1
 800042c:	2200      	movs	r2, #0
 800042e:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000430:	187b      	adds	r3, r7, r1
 8000432:	220c      	movs	r2, #12
 8000434:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000436:	187b      	adds	r3, r7, r1
 8000438:	2200      	movs	r2, #0
 800043a:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800043c:	187b      	adds	r3, r7, r1
 800043e:	2200      	movs	r2, #0
 8000440:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000442:	187b      	adds	r3, r7, r1
 8000444:	4a0a      	ldr	r2, [pc, #40]	@ (8000470 <MX_USART2_UART_Init+0xf8>)
 8000446:	0019      	movs	r1, r3
 8000448:	0010      	movs	r0, r2
 800044a:	f001 fa19 	bl	8001880 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 800044e:	4b08      	ldr	r3, [pc, #32]	@ (8000470 <MX_USART2_UART_Init+0xf8>)
 8000450:	0018      	movs	r0, r3
 8000452:	f7ff fe7f 	bl	8000154 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8000456:	4b06      	ldr	r3, [pc, #24]	@ (8000470 <MX_USART2_UART_Init+0xf8>)
 8000458:	0018      	movs	r0, r3
 800045a:	f7ff fe63 	bl	8000124 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800045e:	4b04      	ldr	r3, [pc, #16]	@ (8000470 <MX_USART2_UART_Init+0xf8>)
 8000460:	0018      	movs	r0, r3
 8000462:	f7ff fe51 	bl	8000108 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b00f      	add	sp, #60	@ 0x3c
 800046c:	bd90      	pop	{r4, r7, pc}
 800046e:	46c0      	nop			@ (mov r8, r8)
 8000470:	40004400 	.word	0x40004400

08000474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b089      	sub	sp, #36	@ 0x24
 8000478:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800047a:	2418      	movs	r4, #24
 800047c:	193b      	adds	r3, r7, r4
 800047e:	0018      	movs	r0, r3
 8000480:	2308      	movs	r3, #8
 8000482:	001a      	movs	r2, r3
 8000484:	2100      	movs	r1, #0
 8000486:	f001 faad 	bl	80019e4 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	003b      	movs	r3, r7
 800048c:	0018      	movs	r0, r3
 800048e:	2318      	movs	r3, #24
 8000490:	001a      	movs	r2, r3
 8000492:	2100      	movs	r1, #0
 8000494:	f001 faa6 	bl	80019e4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000498:	2380      	movs	r3, #128	@ 0x80
 800049a:	031b      	lsls	r3, r3, #12
 800049c:	0018      	movs	r0, r3
 800049e:	f7ff fee5 	bl	800026c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80004a2:	2380      	movs	r3, #128	@ 0x80
 80004a4:	03db      	lsls	r3, r3, #15
 80004a6:	0018      	movs	r0, r3
 80004a8:	f7ff fee0 	bl	800026c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80004ac:	2380      	movs	r3, #128	@ 0x80
 80004ae:	029b      	lsls	r3, r3, #10
 80004b0:	0018      	movs	r0, r3
 80004b2:	f7ff fedb 	bl	800026c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 80004b6:	2390      	movs	r3, #144	@ 0x90
 80004b8:	05db      	lsls	r3, r3, #23
 80004ba:	2120      	movs	r1, #32
 80004bc:	0018      	movs	r0, r3
 80004be:	f7ff fec9 	bl	8000254 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80004c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000540 <MX_GPIO_Init+0xcc>)
 80004c4:	0019      	movs	r1, r3
 80004c6:	2002      	movs	r0, #2
 80004c8:	f7ff fe66 	bl	8000198 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80004cc:	2380      	movs	r3, #128	@ 0x80
 80004ce:	019b      	lsls	r3, r3, #6
 80004d0:	481c      	ldr	r0, [pc, #112]	@ (8000544 <MX_GPIO_Init+0xd0>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	0019      	movs	r1, r3
 80004d6:	f7ff fea1 	bl	800021c <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 80004da:	2380      	movs	r3, #128	@ 0x80
 80004dc:	019b      	lsls	r3, r3, #6
 80004de:	4819      	ldr	r0, [pc, #100]	@ (8000544 <MX_GPIO_Init+0xd0>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	0019      	movs	r1, r3
 80004e4:	f7ff fe7e 	bl	80001e4 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80004e8:	0021      	movs	r1, r4
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2280      	movs	r2, #128	@ 0x80
 80004ee:	0192      	lsls	r2, r2, #6
 80004f0:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	2201      	movs	r2, #1
 80004f6:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2200      	movs	r2, #0
 80004fc:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2202      	movs	r2, #2
 8000502:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000504:	187b      	adds	r3, r7, r1
 8000506:	0018      	movs	r0, r3
 8000508:	f000 fe44 	bl	8001194 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 800050c:	003b      	movs	r3, r7
 800050e:	2220      	movs	r2, #32
 8000510:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000512:	003b      	movs	r3, r7
 8000514:	2201      	movs	r2, #1
 8000516:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000518:	003b      	movs	r3, r7
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800051e:	003b      	movs	r3, r7
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000524:	003b      	movs	r3, r7
 8000526:	2200      	movs	r2, #0
 8000528:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800052a:	003a      	movs	r2, r7
 800052c:	2390      	movs	r3, #144	@ 0x90
 800052e:	05db      	lsls	r3, r3, #23
 8000530:	0011      	movs	r1, r2
 8000532:	0018      	movs	r0, r3
 8000534:	f000 ff6e 	bl	8001414 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000538:	46c0      	nop			@ (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	b009      	add	sp, #36	@ 0x24
 800053e:	bd90      	pop	{r4, r7, pc}
 8000540:	00040003 	.word	0x00040003
 8000544:	48000800 	.word	0x48000800

08000548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800054c:	b672      	cpsid	i
}
 800054e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000550:	46c0      	nop			@ (mov r8, r8)
 8000552:	e7fd      	b.n	8000550 <Error_Handler+0x8>

08000554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800055a:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <HAL_MspInit+0x44>)
 800055c:	699a      	ldr	r2, [r3, #24]
 800055e:	4b0e      	ldr	r3, [pc, #56]	@ (8000598 <HAL_MspInit+0x44>)
 8000560:	2101      	movs	r1, #1
 8000562:	430a      	orrs	r2, r1
 8000564:	619a      	str	r2, [r3, #24]
 8000566:	4b0c      	ldr	r3, [pc, #48]	@ (8000598 <HAL_MspInit+0x44>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	2201      	movs	r2, #1
 800056c:	4013      	ands	r3, r2
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000572:	4b09      	ldr	r3, [pc, #36]	@ (8000598 <HAL_MspInit+0x44>)
 8000574:	69da      	ldr	r2, [r3, #28]
 8000576:	4b08      	ldr	r3, [pc, #32]	@ (8000598 <HAL_MspInit+0x44>)
 8000578:	2180      	movs	r1, #128	@ 0x80
 800057a:	0549      	lsls	r1, r1, #21
 800057c:	430a      	orrs	r2, r1
 800057e:	61da      	str	r2, [r3, #28]
 8000580:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <HAL_MspInit+0x44>)
 8000582:	69da      	ldr	r2, [r3, #28]
 8000584:	2380      	movs	r3, #128	@ 0x80
 8000586:	055b      	lsls	r3, r3, #21
 8000588:	4013      	ands	r3, r2
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058e:	46c0      	nop			@ (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	b002      	add	sp, #8
 8000594:	bd80      	pop	{r7, pc}
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	40021000 	.word	0x40021000

0800059c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005a0:	46c0      	nop			@ (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005a8:	480d      	ldr	r0, [pc, #52]	@ (80005e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80005ac:	f7ff fff6 	bl	800059c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b0:	480c      	ldr	r0, [pc, #48]	@ (80005e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005b2:	490d      	ldr	r1, [pc, #52]	@ (80005e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b4:	4a0d      	ldr	r2, [pc, #52]	@ (80005ec <LoopForever+0xe>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b8:	e002      	b.n	80005c0 <LoopCopyDataInit>

080005ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005be:	3304      	adds	r3, #4

080005c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c4:	d3f9      	bcc.n	80005ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c6:	4a0a      	ldr	r2, [pc, #40]	@ (80005f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c8:	4c0a      	ldr	r4, [pc, #40]	@ (80005f4 <LoopForever+0x16>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005cc:	e001      	b.n	80005d2 <LoopFillZerobss>

080005ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d0:	3204      	adds	r2, #4

080005d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d4:	d3fb      	bcc.n	80005ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005d6:	f001 fb1b 	bl	8001c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005da:	f7ff fe73 	bl	80002c4 <main>

080005de <LoopForever>:

LoopForever:
    b LoopForever
 80005de:	e7fe      	b.n	80005de <LoopForever>
  ldr   r0, =_estack
 80005e0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80005e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005ec:	08001cf8 	.word	0x08001cf8
  ldr r2, =_sbss
 80005f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005f4:	20000030 	.word	0x20000030

080005f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f8:	e7fe      	b.n	80005f8 <ADC1_IRQHandler>
	...

080005fc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000600:	4b07      	ldr	r3, [pc, #28]	@ (8000620 <HAL_Init+0x24>)
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <HAL_Init+0x24>)
 8000606:	2110      	movs	r1, #16
 8000608:	430a      	orrs	r2, r1
 800060a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800060c:	2003      	movs	r0, #3
 800060e:	f000 f809 	bl	8000624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000612:	f7ff ff9f 	bl	8000554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000616:	2300      	movs	r3, #0
}
 8000618:	0018      	movs	r0, r3
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	40022000 	.word	0x40022000

08000624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800062c:	4b14      	ldr	r3, [pc, #80]	@ (8000680 <HAL_InitTick+0x5c>)
 800062e:	681c      	ldr	r4, [r3, #0]
 8000630:	4b14      	ldr	r3, [pc, #80]	@ (8000684 <HAL_InitTick+0x60>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	0019      	movs	r1, r3
 8000636:	23fa      	movs	r3, #250	@ 0xfa
 8000638:	0098      	lsls	r0, r3, #2
 800063a:	f001 f9cd 	bl	80019d8 <__aeabi_uidiv>
 800063e:	0003      	movs	r3, r0
 8000640:	0019      	movs	r1, r3
 8000642:	0020      	movs	r0, r4
 8000644:	f001 f9c8 	bl	80019d8 <__aeabi_uidiv>
 8000648:	0003      	movs	r3, r0
 800064a:	0018      	movs	r0, r3
 800064c:	f000 f8cf 	bl	80007ee <HAL_SYSTICK_Config>
 8000650:	1e03      	subs	r3, r0, #0
 8000652:	d001      	beq.n	8000658 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000654:	2301      	movs	r3, #1
 8000656:	e00f      	b.n	8000678 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2b03      	cmp	r3, #3
 800065c:	d80b      	bhi.n	8000676 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	2301      	movs	r3, #1
 8000662:	425b      	negs	r3, r3
 8000664:	2200      	movs	r2, #0
 8000666:	0018      	movs	r0, r3
 8000668:	f000 f8ac 	bl	80007c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800066c:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <HAL_InitTick+0x64>)
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000672:	2300      	movs	r3, #0
 8000674:	e000      	b.n	8000678 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000676:	2301      	movs	r3, #1
}
 8000678:	0018      	movs	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	b003      	add	sp, #12
 800067e:	bd90      	pop	{r4, r7, pc}
 8000680:	20000000 	.word	0x20000000
 8000684:	20000008 	.word	0x20000008
 8000688:	20000004 	.word	0x20000004

0800068c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  return uwTick;
 8000690:	4b02      	ldr	r3, [pc, #8]	@ (800069c <HAL_GetTick+0x10>)
 8000692:	681b      	ldr	r3, [r3, #0]
}
 8000694:	0018      	movs	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	46c0      	nop			@ (mov r8, r8)
 800069c:	20000028 	.word	0x20000028

080006a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	0002      	movs	r2, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006ae:	1dfb      	adds	r3, r7, #7
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80006b4:	d828      	bhi.n	8000708 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006b6:	4a2f      	ldr	r2, [pc, #188]	@ (8000774 <__NVIC_SetPriority+0xd4>)
 80006b8:	1dfb      	adds	r3, r7, #7
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	b25b      	sxtb	r3, r3
 80006be:	089b      	lsrs	r3, r3, #2
 80006c0:	33c0      	adds	r3, #192	@ 0xc0
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	589b      	ldr	r3, [r3, r2]
 80006c6:	1dfa      	adds	r2, r7, #7
 80006c8:	7812      	ldrb	r2, [r2, #0]
 80006ca:	0011      	movs	r1, r2
 80006cc:	2203      	movs	r2, #3
 80006ce:	400a      	ands	r2, r1
 80006d0:	00d2      	lsls	r2, r2, #3
 80006d2:	21ff      	movs	r1, #255	@ 0xff
 80006d4:	4091      	lsls	r1, r2
 80006d6:	000a      	movs	r2, r1
 80006d8:	43d2      	mvns	r2, r2
 80006da:	401a      	ands	r2, r3
 80006dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	019b      	lsls	r3, r3, #6
 80006e2:	22ff      	movs	r2, #255	@ 0xff
 80006e4:	401a      	ands	r2, r3
 80006e6:	1dfb      	adds	r3, r7, #7
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	0018      	movs	r0, r3
 80006ec:	2303      	movs	r3, #3
 80006ee:	4003      	ands	r3, r0
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006f4:	481f      	ldr	r0, [pc, #124]	@ (8000774 <__NVIC_SetPriority+0xd4>)
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b25b      	sxtb	r3, r3
 80006fc:	089b      	lsrs	r3, r3, #2
 80006fe:	430a      	orrs	r2, r1
 8000700:	33c0      	adds	r3, #192	@ 0xc0
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000706:	e031      	b.n	800076c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000708:	4a1b      	ldr	r2, [pc, #108]	@ (8000778 <__NVIC_SetPriority+0xd8>)
 800070a:	1dfb      	adds	r3, r7, #7
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	0019      	movs	r1, r3
 8000710:	230f      	movs	r3, #15
 8000712:	400b      	ands	r3, r1
 8000714:	3b08      	subs	r3, #8
 8000716:	089b      	lsrs	r3, r3, #2
 8000718:	3306      	adds	r3, #6
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	18d3      	adds	r3, r2, r3
 800071e:	3304      	adds	r3, #4
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	1dfa      	adds	r2, r7, #7
 8000724:	7812      	ldrb	r2, [r2, #0]
 8000726:	0011      	movs	r1, r2
 8000728:	2203      	movs	r2, #3
 800072a:	400a      	ands	r2, r1
 800072c:	00d2      	lsls	r2, r2, #3
 800072e:	21ff      	movs	r1, #255	@ 0xff
 8000730:	4091      	lsls	r1, r2
 8000732:	000a      	movs	r2, r1
 8000734:	43d2      	mvns	r2, r2
 8000736:	401a      	ands	r2, r3
 8000738:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	019b      	lsls	r3, r3, #6
 800073e:	22ff      	movs	r2, #255	@ 0xff
 8000740:	401a      	ands	r2, r3
 8000742:	1dfb      	adds	r3, r7, #7
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	0018      	movs	r0, r3
 8000748:	2303      	movs	r3, #3
 800074a:	4003      	ands	r3, r0
 800074c:	00db      	lsls	r3, r3, #3
 800074e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000750:	4809      	ldr	r0, [pc, #36]	@ (8000778 <__NVIC_SetPriority+0xd8>)
 8000752:	1dfb      	adds	r3, r7, #7
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	001c      	movs	r4, r3
 8000758:	230f      	movs	r3, #15
 800075a:	4023      	ands	r3, r4
 800075c:	3b08      	subs	r3, #8
 800075e:	089b      	lsrs	r3, r3, #2
 8000760:	430a      	orrs	r2, r1
 8000762:	3306      	adds	r3, #6
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	18c3      	adds	r3, r0, r3
 8000768:	3304      	adds	r3, #4
 800076a:	601a      	str	r2, [r3, #0]
}
 800076c:	46c0      	nop			@ (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b003      	add	sp, #12
 8000772:	bd90      	pop	{r4, r7, pc}
 8000774:	e000e100 	.word	0xe000e100
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	1e5a      	subs	r2, r3, #1
 8000788:	2380      	movs	r3, #128	@ 0x80
 800078a:	045b      	lsls	r3, r3, #17
 800078c:	429a      	cmp	r2, r3
 800078e:	d301      	bcc.n	8000794 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000790:	2301      	movs	r3, #1
 8000792:	e010      	b.n	80007b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000794:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <SysTick_Config+0x44>)
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	3a01      	subs	r2, #1
 800079a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800079c:	2301      	movs	r3, #1
 800079e:	425b      	negs	r3, r3
 80007a0:	2103      	movs	r1, #3
 80007a2:	0018      	movs	r0, r3
 80007a4:	f7ff ff7c 	bl	80006a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007a8:	4b05      	ldr	r3, [pc, #20]	@ (80007c0 <SysTick_Config+0x44>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ae:	4b04      	ldr	r3, [pc, #16]	@ (80007c0 <SysTick_Config+0x44>)
 80007b0:	2207      	movs	r2, #7
 80007b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	0018      	movs	r0, r3
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b002      	add	sp, #8
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	e000e010 	.word	0xe000e010

080007c4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60b9      	str	r1, [r7, #8]
 80007cc:	607a      	str	r2, [r7, #4]
 80007ce:	210f      	movs	r1, #15
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	1c02      	adds	r2, r0, #0
 80007d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80007d6:	68ba      	ldr	r2, [r7, #8]
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	b25b      	sxtb	r3, r3
 80007de:	0011      	movs	r1, r2
 80007e0:	0018      	movs	r0, r3
 80007e2:	f7ff ff5d 	bl	80006a0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80007e6:	46c0      	nop			@ (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b004      	add	sp, #16
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	0018      	movs	r0, r3
 80007fa:	f7ff ffbf 	bl	800077c <SysTick_Config>
 80007fe:	0003      	movs	r3, r0
}
 8000800:	0018      	movs	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	b002      	add	sp, #8
 8000806:	bd80      	pop	{r7, pc}

08000808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d101      	bne.n	800081a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	e301      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2201      	movs	r2, #1
 8000820:	4013      	ands	r3, r2
 8000822:	d100      	bne.n	8000826 <HAL_RCC_OscConfig+0x1e>
 8000824:	e08d      	b.n	8000942 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000826:	4bc3      	ldr	r3, [pc, #780]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	220c      	movs	r2, #12
 800082c:	4013      	ands	r3, r2
 800082e:	2b04      	cmp	r3, #4
 8000830:	d00e      	beq.n	8000850 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000832:	4bc0      	ldr	r3, [pc, #768]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	220c      	movs	r2, #12
 8000838:	4013      	ands	r3, r2
 800083a:	2b08      	cmp	r3, #8
 800083c:	d116      	bne.n	800086c <HAL_RCC_OscConfig+0x64>
 800083e:	4bbd      	ldr	r3, [pc, #756]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000840:	685a      	ldr	r2, [r3, #4]
 8000842:	2380      	movs	r3, #128	@ 0x80
 8000844:	025b      	lsls	r3, r3, #9
 8000846:	401a      	ands	r2, r3
 8000848:	2380      	movs	r3, #128	@ 0x80
 800084a:	025b      	lsls	r3, r3, #9
 800084c:	429a      	cmp	r2, r3
 800084e:	d10d      	bne.n	800086c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000850:	4bb8      	ldr	r3, [pc, #736]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	2380      	movs	r3, #128	@ 0x80
 8000856:	029b      	lsls	r3, r3, #10
 8000858:	4013      	ands	r3, r2
 800085a:	d100      	bne.n	800085e <HAL_RCC_OscConfig+0x56>
 800085c:	e070      	b.n	8000940 <HAL_RCC_OscConfig+0x138>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d000      	beq.n	8000868 <HAL_RCC_OscConfig+0x60>
 8000866:	e06b      	b.n	8000940 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000868:	2301      	movs	r3, #1
 800086a:	e2d8      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d107      	bne.n	8000884 <HAL_RCC_OscConfig+0x7c>
 8000874:	4baf      	ldr	r3, [pc, #700]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	4bae      	ldr	r3, [pc, #696]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 800087a:	2180      	movs	r1, #128	@ 0x80
 800087c:	0249      	lsls	r1, r1, #9
 800087e:	430a      	orrs	r2, r1
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	e02f      	b.n	80008e4 <HAL_RCC_OscConfig+0xdc>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d10c      	bne.n	80008a6 <HAL_RCC_OscConfig+0x9e>
 800088c:	4ba9      	ldr	r3, [pc, #676]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4ba8      	ldr	r3, [pc, #672]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000892:	49a9      	ldr	r1, [pc, #676]	@ (8000b38 <HAL_RCC_OscConfig+0x330>)
 8000894:	400a      	ands	r2, r1
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	4ba6      	ldr	r3, [pc, #664]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4ba5      	ldr	r3, [pc, #660]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 800089e:	49a7      	ldr	r1, [pc, #668]	@ (8000b3c <HAL_RCC_OscConfig+0x334>)
 80008a0:	400a      	ands	r2, r1
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	e01e      	b.n	80008e4 <HAL_RCC_OscConfig+0xdc>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	2b05      	cmp	r3, #5
 80008ac:	d10e      	bne.n	80008cc <HAL_RCC_OscConfig+0xc4>
 80008ae:	4ba1      	ldr	r3, [pc, #644]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	4ba0      	ldr	r3, [pc, #640]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80008b4:	2180      	movs	r1, #128	@ 0x80
 80008b6:	02c9      	lsls	r1, r1, #11
 80008b8:	430a      	orrs	r2, r1
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	4b9d      	ldr	r3, [pc, #628]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b9c      	ldr	r3, [pc, #624]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80008c2:	2180      	movs	r1, #128	@ 0x80
 80008c4:	0249      	lsls	r1, r1, #9
 80008c6:	430a      	orrs	r2, r1
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	e00b      	b.n	80008e4 <HAL_RCC_OscConfig+0xdc>
 80008cc:	4b99      	ldr	r3, [pc, #612]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b98      	ldr	r3, [pc, #608]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80008d2:	4999      	ldr	r1, [pc, #612]	@ (8000b38 <HAL_RCC_OscConfig+0x330>)
 80008d4:	400a      	ands	r2, r1
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	4b96      	ldr	r3, [pc, #600]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b95      	ldr	r3, [pc, #596]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80008de:	4997      	ldr	r1, [pc, #604]	@ (8000b3c <HAL_RCC_OscConfig+0x334>)
 80008e0:	400a      	ands	r2, r1
 80008e2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d014      	beq.n	8000916 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008ec:	f7ff fece 	bl	800068c <HAL_GetTick>
 80008f0:	0003      	movs	r3, r0
 80008f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008f4:	e008      	b.n	8000908 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008f6:	f7ff fec9 	bl	800068c <HAL_GetTick>
 80008fa:	0002      	movs	r2, r0
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	1ad3      	subs	r3, r2, r3
 8000900:	2b64      	cmp	r3, #100	@ 0x64
 8000902:	d901      	bls.n	8000908 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000904:	2303      	movs	r3, #3
 8000906:	e28a      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000908:	4b8a      	ldr	r3, [pc, #552]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	2380      	movs	r3, #128	@ 0x80
 800090e:	029b      	lsls	r3, r3, #10
 8000910:	4013      	ands	r3, r2
 8000912:	d0f0      	beq.n	80008f6 <HAL_RCC_OscConfig+0xee>
 8000914:	e015      	b.n	8000942 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000916:	f7ff feb9 	bl	800068c <HAL_GetTick>
 800091a:	0003      	movs	r3, r0
 800091c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800091e:	e008      	b.n	8000932 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000920:	f7ff feb4 	bl	800068c <HAL_GetTick>
 8000924:	0002      	movs	r2, r0
 8000926:	69bb      	ldr	r3, [r7, #24]
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	2b64      	cmp	r3, #100	@ 0x64
 800092c:	d901      	bls.n	8000932 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800092e:	2303      	movs	r3, #3
 8000930:	e275      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000932:	4b80      	ldr	r3, [pc, #512]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	2380      	movs	r3, #128	@ 0x80
 8000938:	029b      	lsls	r3, r3, #10
 800093a:	4013      	ands	r3, r2
 800093c:	d1f0      	bne.n	8000920 <HAL_RCC_OscConfig+0x118>
 800093e:	e000      	b.n	8000942 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000940:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2202      	movs	r2, #2
 8000948:	4013      	ands	r3, r2
 800094a:	d100      	bne.n	800094e <HAL_RCC_OscConfig+0x146>
 800094c:	e069      	b.n	8000a22 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800094e:	4b79      	ldr	r3, [pc, #484]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	220c      	movs	r2, #12
 8000954:	4013      	ands	r3, r2
 8000956:	d00b      	beq.n	8000970 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000958:	4b76      	ldr	r3, [pc, #472]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	220c      	movs	r2, #12
 800095e:	4013      	ands	r3, r2
 8000960:	2b08      	cmp	r3, #8
 8000962:	d11c      	bne.n	800099e <HAL_RCC_OscConfig+0x196>
 8000964:	4b73      	ldr	r3, [pc, #460]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000966:	685a      	ldr	r2, [r3, #4]
 8000968:	2380      	movs	r3, #128	@ 0x80
 800096a:	025b      	lsls	r3, r3, #9
 800096c:	4013      	ands	r3, r2
 800096e:	d116      	bne.n	800099e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000970:	4b70      	ldr	r3, [pc, #448]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2202      	movs	r2, #2
 8000976:	4013      	ands	r3, r2
 8000978:	d005      	beq.n	8000986 <HAL_RCC_OscConfig+0x17e>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d001      	beq.n	8000986 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e24b      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000986:	4b6b      	ldr	r3, [pc, #428]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	22f8      	movs	r2, #248	@ 0xf8
 800098c:	4393      	bics	r3, r2
 800098e:	0019      	movs	r1, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	691b      	ldr	r3, [r3, #16]
 8000994:	00da      	lsls	r2, r3, #3
 8000996:	4b67      	ldr	r3, [pc, #412]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000998:	430a      	orrs	r2, r1
 800099a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800099c:	e041      	b.n	8000a22 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d024      	beq.n	80009f0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009a6:	4b63      	ldr	r3, [pc, #396]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4b62      	ldr	r3, [pc, #392]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80009ac:	2101      	movs	r1, #1
 80009ae:	430a      	orrs	r2, r1
 80009b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009b2:	f7ff fe6b 	bl	800068c <HAL_GetTick>
 80009b6:	0003      	movs	r3, r0
 80009b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009ba:	e008      	b.n	80009ce <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009bc:	f7ff fe66 	bl	800068c <HAL_GetTick>
 80009c0:	0002      	movs	r2, r0
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d901      	bls.n	80009ce <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80009ca:	2303      	movs	r3, #3
 80009cc:	e227      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009ce:	4b59      	ldr	r3, [pc, #356]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2202      	movs	r2, #2
 80009d4:	4013      	ands	r3, r2
 80009d6:	d0f1      	beq.n	80009bc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009d8:	4b56      	ldr	r3, [pc, #344]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	22f8      	movs	r2, #248	@ 0xf8
 80009de:	4393      	bics	r3, r2
 80009e0:	0019      	movs	r1, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	691b      	ldr	r3, [r3, #16]
 80009e6:	00da      	lsls	r2, r3, #3
 80009e8:	4b52      	ldr	r3, [pc, #328]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80009ea:	430a      	orrs	r2, r1
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	e018      	b.n	8000a22 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80009f0:	4b50      	ldr	r3, [pc, #320]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b4f      	ldr	r3, [pc, #316]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80009f6:	2101      	movs	r1, #1
 80009f8:	438a      	bics	r2, r1
 80009fa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009fc:	f7ff fe46 	bl	800068c <HAL_GetTick>
 8000a00:	0003      	movs	r3, r0
 8000a02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a04:	e008      	b.n	8000a18 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a06:	f7ff fe41 	bl	800068c <HAL_GetTick>
 8000a0a:	0002      	movs	r2, r0
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d901      	bls.n	8000a18 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000a14:	2303      	movs	r3, #3
 8000a16:	e202      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a18:	4b46      	ldr	r3, [pc, #280]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	4013      	ands	r3, r2
 8000a20:	d1f1      	bne.n	8000a06 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2208      	movs	r2, #8
 8000a28:	4013      	ands	r3, r2
 8000a2a:	d036      	beq.n	8000a9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	69db      	ldr	r3, [r3, #28]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d019      	beq.n	8000a68 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a34:	4b3f      	ldr	r3, [pc, #252]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000a36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a38:	4b3e      	ldr	r3, [pc, #248]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a40:	f7ff fe24 	bl	800068c <HAL_GetTick>
 8000a44:	0003      	movs	r3, r0
 8000a46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a48:	e008      	b.n	8000a5c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a4a:	f7ff fe1f 	bl	800068c <HAL_GetTick>
 8000a4e:	0002      	movs	r2, r0
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	d901      	bls.n	8000a5c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	e1e0      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a5c:	4b35      	ldr	r3, [pc, #212]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a60:	2202      	movs	r2, #2
 8000a62:	4013      	ands	r3, r2
 8000a64:	d0f1      	beq.n	8000a4a <HAL_RCC_OscConfig+0x242>
 8000a66:	e018      	b.n	8000a9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a68:	4b32      	ldr	r3, [pc, #200]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000a6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a6c:	4b31      	ldr	r3, [pc, #196]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000a6e:	2101      	movs	r1, #1
 8000a70:	438a      	bics	r2, r1
 8000a72:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a74:	f7ff fe0a 	bl	800068c <HAL_GetTick>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a7c:	e008      	b.n	8000a90 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a7e:	f7ff fe05 	bl	800068c <HAL_GetTick>
 8000a82:	0002      	movs	r2, r0
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d901      	bls.n	8000a90 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	e1c6      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a90:	4b28      	ldr	r3, [pc, #160]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a94:	2202      	movs	r2, #2
 8000a96:	4013      	ands	r3, r2
 8000a98:	d1f1      	bne.n	8000a7e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	d100      	bne.n	8000aa6 <HAL_RCC_OscConfig+0x29e>
 8000aa4:	e0b4      	b.n	8000c10 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000aa6:	201f      	movs	r0, #31
 8000aa8:	183b      	adds	r3, r7, r0
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000aae:	4b21      	ldr	r3, [pc, #132]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000ab0:	69da      	ldr	r2, [r3, #28]
 8000ab2:	2380      	movs	r3, #128	@ 0x80
 8000ab4:	055b      	lsls	r3, r3, #21
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	d110      	bne.n	8000adc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4b1e      	ldr	r3, [pc, #120]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000abc:	69da      	ldr	r2, [r3, #28]
 8000abe:	4b1d      	ldr	r3, [pc, #116]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000ac0:	2180      	movs	r1, #128	@ 0x80
 8000ac2:	0549      	lsls	r1, r1, #21
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	61da      	str	r2, [r3, #28]
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000aca:	69da      	ldr	r2, [r3, #28]
 8000acc:	2380      	movs	r3, #128	@ 0x80
 8000ace:	055b      	lsls	r3, r3, #21
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ad6:	183b      	adds	r3, r7, r0
 8000ad8:	2201      	movs	r2, #1
 8000ada:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000adc:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <HAL_RCC_OscConfig+0x338>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	2380      	movs	r3, #128	@ 0x80
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	d11a      	bne.n	8000b1e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ae8:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <HAL_RCC_OscConfig+0x338>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <HAL_RCC_OscConfig+0x338>)
 8000aee:	2180      	movs	r1, #128	@ 0x80
 8000af0:	0049      	lsls	r1, r1, #1
 8000af2:	430a      	orrs	r2, r1
 8000af4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000af6:	f7ff fdc9 	bl	800068c <HAL_GetTick>
 8000afa:	0003      	movs	r3, r0
 8000afc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000afe:	e008      	b.n	8000b12 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b00:	f7ff fdc4 	bl	800068c <HAL_GetTick>
 8000b04:	0002      	movs	r2, r0
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	2b64      	cmp	r3, #100	@ 0x64
 8000b0c:	d901      	bls.n	8000b12 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	e185      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b12:	4b0b      	ldr	r3, [pc, #44]	@ (8000b40 <HAL_RCC_OscConfig+0x338>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	2380      	movs	r3, #128	@ 0x80
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	d0f0      	beq.n	8000b00 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d10e      	bne.n	8000b44 <HAL_RCC_OscConfig+0x33c>
 8000b26:	4b03      	ldr	r3, [pc, #12]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000b28:	6a1a      	ldr	r2, [r3, #32]
 8000b2a:	4b02      	ldr	r3, [pc, #8]	@ (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	621a      	str	r2, [r3, #32]
 8000b32:	e035      	b.n	8000ba0 <HAL_RCC_OscConfig+0x398>
 8000b34:	40021000 	.word	0x40021000
 8000b38:	fffeffff 	.word	0xfffeffff
 8000b3c:	fffbffff 	.word	0xfffbffff
 8000b40:	40007000 	.word	0x40007000
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d10c      	bne.n	8000b66 <HAL_RCC_OscConfig+0x35e>
 8000b4c:	4bb6      	ldr	r3, [pc, #728]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000b4e:	6a1a      	ldr	r2, [r3, #32]
 8000b50:	4bb5      	ldr	r3, [pc, #724]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000b52:	2101      	movs	r1, #1
 8000b54:	438a      	bics	r2, r1
 8000b56:	621a      	str	r2, [r3, #32]
 8000b58:	4bb3      	ldr	r3, [pc, #716]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000b5a:	6a1a      	ldr	r2, [r3, #32]
 8000b5c:	4bb2      	ldr	r3, [pc, #712]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000b5e:	2104      	movs	r1, #4
 8000b60:	438a      	bics	r2, r1
 8000b62:	621a      	str	r2, [r3, #32]
 8000b64:	e01c      	b.n	8000ba0 <HAL_RCC_OscConfig+0x398>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	2b05      	cmp	r3, #5
 8000b6c:	d10c      	bne.n	8000b88 <HAL_RCC_OscConfig+0x380>
 8000b6e:	4bae      	ldr	r3, [pc, #696]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000b70:	6a1a      	ldr	r2, [r3, #32]
 8000b72:	4bad      	ldr	r3, [pc, #692]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000b74:	2104      	movs	r1, #4
 8000b76:	430a      	orrs	r2, r1
 8000b78:	621a      	str	r2, [r3, #32]
 8000b7a:	4bab      	ldr	r3, [pc, #684]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000b7c:	6a1a      	ldr	r2, [r3, #32]
 8000b7e:	4baa      	ldr	r3, [pc, #680]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000b80:	2101      	movs	r1, #1
 8000b82:	430a      	orrs	r2, r1
 8000b84:	621a      	str	r2, [r3, #32]
 8000b86:	e00b      	b.n	8000ba0 <HAL_RCC_OscConfig+0x398>
 8000b88:	4ba7      	ldr	r3, [pc, #668]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000b8a:	6a1a      	ldr	r2, [r3, #32]
 8000b8c:	4ba6      	ldr	r3, [pc, #664]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000b8e:	2101      	movs	r1, #1
 8000b90:	438a      	bics	r2, r1
 8000b92:	621a      	str	r2, [r3, #32]
 8000b94:	4ba4      	ldr	r3, [pc, #656]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000b96:	6a1a      	ldr	r2, [r3, #32]
 8000b98:	4ba3      	ldr	r3, [pc, #652]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000b9a:	2104      	movs	r1, #4
 8000b9c:	438a      	bics	r2, r1
 8000b9e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d014      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ba8:	f7ff fd70 	bl	800068c <HAL_GetTick>
 8000bac:	0003      	movs	r3, r0
 8000bae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bb0:	e009      	b.n	8000bc6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bb2:	f7ff fd6b 	bl	800068c <HAL_GetTick>
 8000bb6:	0002      	movs	r2, r0
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	4a9b      	ldr	r2, [pc, #620]	@ (8000e2c <HAL_RCC_OscConfig+0x624>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d901      	bls.n	8000bc6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	e12b      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bc6:	4b98      	ldr	r3, [pc, #608]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000bc8:	6a1b      	ldr	r3, [r3, #32]
 8000bca:	2202      	movs	r2, #2
 8000bcc:	4013      	ands	r3, r2
 8000bce:	d0f0      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x3aa>
 8000bd0:	e013      	b.n	8000bfa <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bd2:	f7ff fd5b 	bl	800068c <HAL_GetTick>
 8000bd6:	0003      	movs	r3, r0
 8000bd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bda:	e009      	b.n	8000bf0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bdc:	f7ff fd56 	bl	800068c <HAL_GetTick>
 8000be0:	0002      	movs	r2, r0
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	4a91      	ldr	r2, [pc, #580]	@ (8000e2c <HAL_RCC_OscConfig+0x624>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d901      	bls.n	8000bf0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8000bec:	2303      	movs	r3, #3
 8000bee:	e116      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bf0:	4b8d      	ldr	r3, [pc, #564]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000bf2:	6a1b      	ldr	r3, [r3, #32]
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	d1f0      	bne.n	8000bdc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000bfa:	231f      	movs	r3, #31
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d105      	bne.n	8000c10 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c04:	4b88      	ldr	r3, [pc, #544]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c06:	69da      	ldr	r2, [r3, #28]
 8000c08:	4b87      	ldr	r3, [pc, #540]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c0a:	4989      	ldr	r1, [pc, #548]	@ (8000e30 <HAL_RCC_OscConfig+0x628>)
 8000c0c:	400a      	ands	r2, r1
 8000c0e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2210      	movs	r2, #16
 8000c16:	4013      	ands	r3, r2
 8000c18:	d063      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d12a      	bne.n	8000c78 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c22:	4b81      	ldr	r3, [pc, #516]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c26:	4b80      	ldr	r3, [pc, #512]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c28:	2104      	movs	r1, #4
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000c2e:	4b7e      	ldr	r3, [pc, #504]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c32:	4b7d      	ldr	r3, [pc, #500]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c34:	2101      	movs	r1, #1
 8000c36:	430a      	orrs	r2, r1
 8000c38:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c3a:	f7ff fd27 	bl	800068c <HAL_GetTick>
 8000c3e:	0003      	movs	r3, r0
 8000c40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c42:	e008      	b.n	8000c56 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c44:	f7ff fd22 	bl	800068c <HAL_GetTick>
 8000c48:	0002      	movs	r2, r0
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d901      	bls.n	8000c56 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e0e3      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c56:	4b74      	ldr	r3, [pc, #464]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	d0f1      	beq.n	8000c44 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c60:	4b71      	ldr	r3, [pc, #452]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c64:	22f8      	movs	r2, #248	@ 0xf8
 8000c66:	4393      	bics	r3, r2
 8000c68:	0019      	movs	r1, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	00da      	lsls	r2, r3, #3
 8000c70:	4b6d      	ldr	r3, [pc, #436]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c72:	430a      	orrs	r2, r1
 8000c74:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c76:	e034      	b.n	8000ce2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	3305      	adds	r3, #5
 8000c7e:	d111      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000c80:	4b69      	ldr	r3, [pc, #420]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c84:	4b68      	ldr	r3, [pc, #416]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c86:	2104      	movs	r1, #4
 8000c88:	438a      	bics	r2, r1
 8000c8a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c8c:	4b66      	ldr	r3, [pc, #408]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c90:	22f8      	movs	r2, #248	@ 0xf8
 8000c92:	4393      	bics	r3, r2
 8000c94:	0019      	movs	r1, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	00da      	lsls	r2, r3, #3
 8000c9c:	4b62      	ldr	r3, [pc, #392]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ca2:	e01e      	b.n	8000ce2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ca4:	4b60      	ldr	r3, [pc, #384]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000ca6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ca8:	4b5f      	ldr	r3, [pc, #380]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000caa:	2104      	movs	r1, #4
 8000cac:	430a      	orrs	r2, r1
 8000cae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000cb0:	4b5d      	ldr	r3, [pc, #372]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000cb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cb4:	4b5c      	ldr	r3, [pc, #368]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	438a      	bics	r2, r1
 8000cba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cbc:	f7ff fce6 	bl	800068c <HAL_GetTick>
 8000cc0:	0003      	movs	r3, r0
 8000cc2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000cc4:	e008      	b.n	8000cd8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000cc6:	f7ff fce1 	bl	800068c <HAL_GetTick>
 8000cca:	0002      	movs	r2, r0
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d901      	bls.n	8000cd8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	e0a2      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000cd8:	4b53      	ldr	r3, [pc, #332]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cdc:	2202      	movs	r2, #2
 8000cde:	4013      	ands	r3, r2
 8000ce0:	d1f1      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a1b      	ldr	r3, [r3, #32]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d100      	bne.n	8000cec <HAL_RCC_OscConfig+0x4e4>
 8000cea:	e097      	b.n	8000e1c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cec:	4b4e      	ldr	r3, [pc, #312]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	220c      	movs	r2, #12
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	2b08      	cmp	r3, #8
 8000cf6:	d100      	bne.n	8000cfa <HAL_RCC_OscConfig+0x4f2>
 8000cf8:	e06b      	b.n	8000dd2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a1b      	ldr	r3, [r3, #32]
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d14c      	bne.n	8000d9c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d02:	4b49      	ldr	r3, [pc, #292]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	4b48      	ldr	r3, [pc, #288]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000d08:	494a      	ldr	r1, [pc, #296]	@ (8000e34 <HAL_RCC_OscConfig+0x62c>)
 8000d0a:	400a      	ands	r2, r1
 8000d0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0e:	f7ff fcbd 	bl	800068c <HAL_GetTick>
 8000d12:	0003      	movs	r3, r0
 8000d14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d16:	e008      	b.n	8000d2a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d18:	f7ff fcb8 	bl	800068c <HAL_GetTick>
 8000d1c:	0002      	movs	r2, r0
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d901      	bls.n	8000d2a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e079      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d2a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	2380      	movs	r3, #128	@ 0x80
 8000d30:	049b      	lsls	r3, r3, #18
 8000d32:	4013      	ands	r3, r2
 8000d34:	d1f0      	bne.n	8000d18 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d36:	4b3c      	ldr	r3, [pc, #240]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d3a:	220f      	movs	r2, #15
 8000d3c:	4393      	bics	r3, r2
 8000d3e:	0019      	movs	r1, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d44:	4b38      	ldr	r3, [pc, #224]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000d46:	430a      	orrs	r2, r1
 8000d48:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d4a:	4b37      	ldr	r3, [pc, #220]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	4a3a      	ldr	r2, [pc, #232]	@ (8000e38 <HAL_RCC_OscConfig+0x630>)
 8000d50:	4013      	ands	r3, r2
 8000d52:	0019      	movs	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	4b32      	ldr	r3, [pc, #200]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000d60:	430a      	orrs	r2, r1
 8000d62:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d64:	4b30      	ldr	r3, [pc, #192]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b2f      	ldr	r3, [pc, #188]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000d6a:	2180      	movs	r1, #128	@ 0x80
 8000d6c:	0449      	lsls	r1, r1, #17
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d72:	f7ff fc8b 	bl	800068c <HAL_GetTick>
 8000d76:	0003      	movs	r3, r0
 8000d78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d7a:	e008      	b.n	8000d8e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d7c:	f7ff fc86 	bl	800068c <HAL_GetTick>
 8000d80:	0002      	movs	r2, r0
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e047      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d8e:	4b26      	ldr	r3, [pc, #152]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	2380      	movs	r3, #128	@ 0x80
 8000d94:	049b      	lsls	r3, r3, #18
 8000d96:	4013      	ands	r3, r2
 8000d98:	d0f0      	beq.n	8000d7c <HAL_RCC_OscConfig+0x574>
 8000d9a:	e03f      	b.n	8000e1c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d9c:	4b22      	ldr	r3, [pc, #136]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b21      	ldr	r3, [pc, #132]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000da2:	4924      	ldr	r1, [pc, #144]	@ (8000e34 <HAL_RCC_OscConfig+0x62c>)
 8000da4:	400a      	ands	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da8:	f7ff fc70 	bl	800068c <HAL_GetTick>
 8000dac:	0003      	movs	r3, r0
 8000dae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000db0:	e008      	b.n	8000dc4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000db2:	f7ff fc6b 	bl	800068c <HAL_GetTick>
 8000db6:	0002      	movs	r2, r0
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d901      	bls.n	8000dc4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e02c      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dc4:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	2380      	movs	r3, #128	@ 0x80
 8000dca:	049b      	lsls	r3, r3, #18
 8000dcc:	4013      	ands	r3, r2
 8000dce:	d1f0      	bne.n	8000db2 <HAL_RCC_OscConfig+0x5aa>
 8000dd0:	e024      	b.n	8000e1c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a1b      	ldr	r3, [r3, #32]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d101      	bne.n	8000dde <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e01f      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8000dde:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8000de4:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000de8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	2380      	movs	r3, #128	@ 0x80
 8000dee:	025b      	lsls	r3, r3, #9
 8000df0:	401a      	ands	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d10e      	bne.n	8000e18 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	220f      	movs	r2, #15
 8000dfe:	401a      	ands	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d107      	bne.n	8000e18 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	23f0      	movs	r3, #240	@ 0xf0
 8000e0c:	039b      	lsls	r3, r3, #14
 8000e0e:	401a      	ands	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d001      	beq.n	8000e1c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e000      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	0018      	movs	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b008      	add	sp, #32
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	00001388 	.word	0x00001388
 8000e30:	efffffff 	.word	0xefffffff
 8000e34:	feffffff 	.word	0xfeffffff
 8000e38:	ffc2ffff 	.word	0xffc2ffff

08000e3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d101      	bne.n	8000e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e0b3      	b.n	8000fb8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e50:	4b5b      	ldr	r3, [pc, #364]	@ (8000fc0 <HAL_RCC_ClockConfig+0x184>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2201      	movs	r2, #1
 8000e56:	4013      	ands	r3, r2
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d911      	bls.n	8000e82 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e5e:	4b58      	ldr	r3, [pc, #352]	@ (8000fc0 <HAL_RCC_ClockConfig+0x184>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2201      	movs	r2, #1
 8000e64:	4393      	bics	r3, r2
 8000e66:	0019      	movs	r1, r3
 8000e68:	4b55      	ldr	r3, [pc, #340]	@ (8000fc0 <HAL_RCC_ClockConfig+0x184>)
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e70:	4b53      	ldr	r3, [pc, #332]	@ (8000fc0 <HAL_RCC_ClockConfig+0x184>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2201      	movs	r2, #1
 8000e76:	4013      	ands	r3, r2
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d001      	beq.n	8000e82 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e09a      	b.n	8000fb8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2202      	movs	r2, #2
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d015      	beq.n	8000eb8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2204      	movs	r2, #4
 8000e92:	4013      	ands	r3, r2
 8000e94:	d006      	beq.n	8000ea4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000e96:	4b4b      	ldr	r3, [pc, #300]	@ (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000e9c:	21e0      	movs	r1, #224	@ 0xe0
 8000e9e:	00c9      	lsls	r1, r1, #3
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ea4:	4b47      	ldr	r3, [pc, #284]	@ (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	22f0      	movs	r2, #240	@ 0xf0
 8000eaa:	4393      	bics	r3, r2
 8000eac:	0019      	movs	r1, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	4b44      	ldr	r3, [pc, #272]	@ (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	d040      	beq.n	8000f44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d107      	bne.n	8000eda <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eca:	4b3e      	ldr	r3, [pc, #248]	@ (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	2380      	movs	r3, #128	@ 0x80
 8000ed0:	029b      	lsls	r3, r3, #10
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d114      	bne.n	8000f00 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e06e      	b.n	8000fb8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d107      	bne.n	8000ef2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ee2:	4b38      	ldr	r3, [pc, #224]	@ (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	2380      	movs	r3, #128	@ 0x80
 8000ee8:	049b      	lsls	r3, r3, #18
 8000eea:	4013      	ands	r3, r2
 8000eec:	d108      	bne.n	8000f00 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e062      	b.n	8000fb8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef2:	4b34      	ldr	r3, [pc, #208]	@ (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	4013      	ands	r3, r2
 8000efa:	d101      	bne.n	8000f00 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e05b      	b.n	8000fb8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f00:	4b30      	ldr	r3, [pc, #192]	@ (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2203      	movs	r2, #3
 8000f06:	4393      	bics	r3, r2
 8000f08:	0019      	movs	r1, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000f10:	430a      	orrs	r2, r1
 8000f12:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f14:	f7ff fbba 	bl	800068c <HAL_GetTick>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f1c:	e009      	b.n	8000f32 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f1e:	f7ff fbb5 	bl	800068c <HAL_GetTick>
 8000f22:	0002      	movs	r2, r0
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	4a27      	ldr	r2, [pc, #156]	@ (8000fc8 <HAL_RCC_ClockConfig+0x18c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e042      	b.n	8000fb8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f32:	4b24      	ldr	r3, [pc, #144]	@ (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	220c      	movs	r2, #12
 8000f38:	401a      	ands	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d1ec      	bne.n	8000f1e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f44:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc0 <HAL_RCC_ClockConfig+0x184>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d211      	bcs.n	8000f76 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f52:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc0 <HAL_RCC_ClockConfig+0x184>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2201      	movs	r2, #1
 8000f58:	4393      	bics	r3, r2
 8000f5a:	0019      	movs	r1, r3
 8000f5c:	4b18      	ldr	r3, [pc, #96]	@ (8000fc0 <HAL_RCC_ClockConfig+0x184>)
 8000f5e:	683a      	ldr	r2, [r7, #0]
 8000f60:	430a      	orrs	r2, r1
 8000f62:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f64:	4b16      	ldr	r3, [pc, #88]	@ (8000fc0 <HAL_RCC_ClockConfig+0x184>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d001      	beq.n	8000f76 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e020      	b.n	8000fb8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	d009      	beq.n	8000f94 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000f80:	4b10      	ldr	r3, [pc, #64]	@ (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	4a11      	ldr	r2, [pc, #68]	@ (8000fcc <HAL_RCC_ClockConfig+0x190>)
 8000f86:	4013      	ands	r3, r2
 8000f88:	0019      	movs	r1, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000f90:	430a      	orrs	r2, r1
 8000f92:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000f94:	f000 f820 	bl	8000fd8 <HAL_RCC_GetSysClockFreq>
 8000f98:	0001      	movs	r1, r0
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	091b      	lsrs	r3, r3, #4
 8000fa0:	220f      	movs	r2, #15
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <HAL_RCC_ClockConfig+0x194>)
 8000fa6:	5cd3      	ldrb	r3, [r2, r3]
 8000fa8:	000a      	movs	r2, r1
 8000faa:	40da      	lsrs	r2, r3
 8000fac:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <HAL_RCC_ClockConfig+0x198>)
 8000fae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f7ff fb37 	bl	8000624 <HAL_InitTick>
  
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	0018      	movs	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b004      	add	sp, #16
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40022000 	.word	0x40022000
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	00001388 	.word	0x00001388
 8000fcc:	fffff8ff 	.word	0xfffff8ff
 8000fd0:	08001c70 	.word	0x08001c70
 8000fd4:	20000000 	.word	0x20000000

08000fd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8000ff2:	4b20      	ldr	r3, [pc, #128]	@ (8001074 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	d002      	beq.n	8001008 <HAL_RCC_GetSysClockFreq+0x30>
 8001002:	2b08      	cmp	r3, #8
 8001004:	d003      	beq.n	800100e <HAL_RCC_GetSysClockFreq+0x36>
 8001006:	e02c      	b.n	8001062 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001008:	4b1b      	ldr	r3, [pc, #108]	@ (8001078 <HAL_RCC_GetSysClockFreq+0xa0>)
 800100a:	613b      	str	r3, [r7, #16]
      break;
 800100c:	e02c      	b.n	8001068 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	0c9b      	lsrs	r3, r3, #18
 8001012:	220f      	movs	r2, #15
 8001014:	4013      	ands	r3, r2
 8001016:	4a19      	ldr	r2, [pc, #100]	@ (800107c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001018:	5cd3      	ldrb	r3, [r2, r3]
 800101a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800101c:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <HAL_RCC_GetSysClockFreq+0x9c>)
 800101e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001020:	220f      	movs	r2, #15
 8001022:	4013      	ands	r3, r2
 8001024:	4a16      	ldr	r2, [pc, #88]	@ (8001080 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001026:	5cd3      	ldrb	r3, [r2, r3]
 8001028:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	2380      	movs	r3, #128	@ 0x80
 800102e:	025b      	lsls	r3, r3, #9
 8001030:	4013      	ands	r3, r2
 8001032:	d009      	beq.n	8001048 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	4810      	ldr	r0, [pc, #64]	@ (8001078 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001038:	f000 fcce 	bl	80019d8 <__aeabi_uidiv>
 800103c:	0003      	movs	r3, r0
 800103e:	001a      	movs	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4353      	muls	r3, r2
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	e009      	b.n	800105c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	000a      	movs	r2, r1
 800104c:	0152      	lsls	r2, r2, #5
 800104e:	1a52      	subs	r2, r2, r1
 8001050:	0193      	lsls	r3, r2, #6
 8001052:	1a9b      	subs	r3, r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	185b      	adds	r3, r3, r1
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	613b      	str	r3, [r7, #16]
      break;
 8001060:	e002      	b.n	8001068 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001062:	4b05      	ldr	r3, [pc, #20]	@ (8001078 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001064:	613b      	str	r3, [r7, #16]
      break;
 8001066:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001068:	693b      	ldr	r3, [r7, #16]
}
 800106a:	0018      	movs	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	b006      	add	sp, #24
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			@ (mov r8, r8)
 8001074:	40021000 	.word	0x40021000
 8001078:	007a1200 	.word	0x007a1200
 800107c:	08001c88 	.word	0x08001c88
 8001080:	08001c98 	.word	0x08001c98

08001084 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800108c:	4b04      	ldr	r3, [pc, #16]	@ (80010a0 <LL_EXTI_EnableIT_0_31+0x1c>)
 800108e:	6819      	ldr	r1, [r3, #0]
 8001090:	4b03      	ldr	r3, [pc, #12]	@ (80010a0 <LL_EXTI_EnableIT_0_31+0x1c>)
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	430a      	orrs	r2, r1
 8001096:	601a      	str	r2, [r3, #0]
}
 8001098:	46c0      	nop			@ (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b002      	add	sp, #8
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40010400 	.word	0x40010400

080010a4 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <LL_EXTI_DisableIT_0_31+0x20>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	43d9      	mvns	r1, r3
 80010b4:	4b03      	ldr	r3, [pc, #12]	@ (80010c4 <LL_EXTI_DisableIT_0_31+0x20>)
 80010b6:	400a      	ands	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]
}
 80010ba:	46c0      	nop			@ (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	b002      	add	sp, #8
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	40010400 	.word	0x40010400

080010c8 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80010d0:	4b04      	ldr	r3, [pc, #16]	@ (80010e4 <LL_EXTI_EnableEvent_0_31+0x1c>)
 80010d2:	6859      	ldr	r1, [r3, #4]
 80010d4:	4b03      	ldr	r3, [pc, #12]	@ (80010e4 <LL_EXTI_EnableEvent_0_31+0x1c>)
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	430a      	orrs	r2, r1
 80010da:	605a      	str	r2, [r3, #4]

}
 80010dc:	46c0      	nop			@ (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	b002      	add	sp, #8
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40010400 	.word	0x40010400

080010e8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <LL_EXTI_DisableEvent_0_31+0x20>)
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	4b03      	ldr	r3, [pc, #12]	@ (8001108 <LL_EXTI_DisableEvent_0_31+0x20>)
 80010fa:	400a      	ands	r2, r1
 80010fc:	605a      	str	r2, [r3, #4]
}
 80010fe:	46c0      	nop			@ (mov r8, r8)
 8001100:	46bd      	mov	sp, r7
 8001102:	b002      	add	sp, #8
 8001104:	bd80      	pop	{r7, pc}
 8001106:	46c0      	nop			@ (mov r8, r8)
 8001108:	40010400 	.word	0x40010400

0800110c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001114:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001116:	6899      	ldr	r1, [r3, #8]
 8001118:	4b03      	ldr	r3, [pc, #12]	@ (8001128 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	430a      	orrs	r2, r1
 800111e:	609a      	str	r2, [r3, #8]

}
 8001120:	46c0      	nop			@ (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	b002      	add	sp, #8
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40010400 	.word	0x40010400

0800112c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001134:	4b05      	ldr	r3, [pc, #20]	@ (800114c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	43d9      	mvns	r1, r3
 800113c:	4b03      	ldr	r3, [pc, #12]	@ (800114c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800113e:	400a      	ands	r2, r1
 8001140:	609a      	str	r2, [r3, #8]

}
 8001142:	46c0      	nop			@ (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b002      	add	sp, #8
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			@ (mov r8, r8)
 800114c:	40010400 	.word	0x40010400

08001150 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001158:	4b04      	ldr	r3, [pc, #16]	@ (800116c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800115a:	68d9      	ldr	r1, [r3, #12]
 800115c:	4b03      	ldr	r3, [pc, #12]	@ (800116c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	430a      	orrs	r2, r1
 8001162:	60da      	str	r2, [r3, #12]
}
 8001164:	46c0      	nop			@ (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	b002      	add	sp, #8
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40010400 	.word	0x40010400

08001170 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001178:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	43d9      	mvns	r1, r3
 8001180:	4b03      	ldr	r3, [pc, #12]	@ (8001190 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001182:	400a      	ands	r2, r1
 8001184:	60da      	str	r2, [r3, #12]
}
 8001186:	46c0      	nop			@ (mov r8, r8)
 8001188:	46bd      	mov	sp, r7
 800118a:	b002      	add	sp, #8
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	40010400 	.word	0x40010400

08001194 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800119c:	230f      	movs	r3, #15
 800119e:	18fb      	adds	r3, r7, r3
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	791b      	ldrb	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d100      	bne.n	80011ae <LL_EXTI_Init+0x1a>
 80011ac:	e068      	b.n	8001280 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d100      	bne.n	80011b8 <LL_EXTI_Init+0x24>
 80011b6:	e06d      	b.n	8001294 <LL_EXTI_Init+0x100>
    {
      switch (EXTI_InitStruct->Mode)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	795b      	ldrb	r3, [r3, #5]
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d01b      	beq.n	80011f8 <LL_EXTI_Init+0x64>
 80011c0:	dc25      	bgt.n	800120e <LL_EXTI_Init+0x7a>
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <LL_EXTI_Init+0x38>
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d00b      	beq.n	80011e2 <LL_EXTI_Init+0x4e>
 80011ca:	e020      	b.n	800120e <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	0018      	movs	r0, r3
 80011d2:	f7ff ff89 	bl	80010e8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	0018      	movs	r0, r3
 80011dc:	f7ff ff52 	bl	8001084 <LL_EXTI_EnableIT_0_31>
          break;
 80011e0:	e01a      	b.n	8001218 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	0018      	movs	r0, r3
 80011e8:	f7ff ff5c 	bl	80010a4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7ff ff69 	bl	80010c8 <LL_EXTI_EnableEvent_0_31>
          break;
 80011f6:	e00f      	b.n	8001218 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	0018      	movs	r0, r3
 80011fe:	f7ff ff41 	bl	8001084 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	0018      	movs	r0, r3
 8001208:	f7ff ff5e 	bl	80010c8 <LL_EXTI_EnableEvent_0_31>
          break;
 800120c:	e004      	b.n	8001218 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 800120e:	230f      	movs	r3, #15
 8001210:	18fb      	adds	r3, r7, r3
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
          break;
 8001216:	46c0      	nop			@ (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	799b      	ldrb	r3, [r3, #6]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d039      	beq.n	8001294 <LL_EXTI_Init+0x100>
      {
        switch (EXTI_InitStruct->Trigger)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	799b      	ldrb	r3, [r3, #6]
 8001224:	2b03      	cmp	r3, #3
 8001226:	d01b      	beq.n	8001260 <LL_EXTI_Init+0xcc>
 8001228:	dc25      	bgt.n	8001276 <LL_EXTI_Init+0xe2>
 800122a:	2b01      	cmp	r3, #1
 800122c:	d002      	beq.n	8001234 <LL_EXTI_Init+0xa0>
 800122e:	2b02      	cmp	r3, #2
 8001230:	d00b      	beq.n	800124a <LL_EXTI_Init+0xb6>
 8001232:	e020      	b.n	8001276 <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	0018      	movs	r0, r3
 800123a:	f7ff ff99 	bl	8001170 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	0018      	movs	r0, r3
 8001244:	f7ff ff62 	bl	800110c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001248:	e024      	b.n	8001294 <LL_EXTI_Init+0x100>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	0018      	movs	r0, r3
 8001250:	f7ff ff6c 	bl	800112c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	0018      	movs	r0, r3
 800125a:	f7ff ff79 	bl	8001150 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800125e:	e019      	b.n	8001294 <LL_EXTI_Init+0x100>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	0018      	movs	r0, r3
 8001266:	f7ff ff51 	bl	800110c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	0018      	movs	r0, r3
 8001270:	f7ff ff6e 	bl	8001150 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001274:	e00e      	b.n	8001294 <LL_EXTI_Init+0x100>
          default:
            status = ERROR;
 8001276:	230f      	movs	r3, #15
 8001278:	18fb      	adds	r3, r7, r3
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]
            break;
 800127e:	e009      	b.n	8001294 <LL_EXTI_Init+0x100>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	0018      	movs	r0, r3
 8001286:	f7ff ff0d 	bl	80010a4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	0018      	movs	r0, r3
 8001290:	f7ff ff2a 	bl	80010e8 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8001294:	230f      	movs	r3, #15
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	781b      	ldrb	r3, [r3, #0]
}
 800129a:	0018      	movs	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	b004      	add	sp, #16
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <LL_GPIO_SetPinMode>:
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b084      	sub	sp, #16
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	60f8      	str	r0, [r7, #12]
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6819      	ldr	r1, [r3, #0]
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	435b      	muls	r3, r3
 80012b6:	001a      	movs	r2, r3
 80012b8:	0013      	movs	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	189b      	adds	r3, r3, r2
 80012be:	43db      	mvns	r3, r3
 80012c0:	400b      	ands	r3, r1
 80012c2:	001a      	movs	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	435b      	muls	r3, r3
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	434b      	muls	r3, r1
 80012cc:	431a      	orrs	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	601a      	str	r2, [r3, #0]
}
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b004      	add	sp, #16
 80012d8:	bd80      	pop	{r7, pc}

080012da <LL_GPIO_SetPinOutputType>:
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b084      	sub	sp, #16
 80012de:	af00      	add	r7, sp, #0
 80012e0:	60f8      	str	r0, [r7, #12]
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	43d2      	mvns	r2, r2
 80012ee:	401a      	ands	r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	434b      	muls	r3, r1
 80012f6:	431a      	orrs	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	605a      	str	r2, [r3, #4]
}
 80012fc:	46c0      	nop			@ (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	b004      	add	sp, #16
 8001302:	bd80      	pop	{r7, pc}

08001304 <LL_GPIO_SetPinSpeed>:
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6899      	ldr	r1, [r3, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	435b      	muls	r3, r3
 8001318:	001a      	movs	r2, r3
 800131a:	0013      	movs	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	189b      	adds	r3, r3, r2
 8001320:	43db      	mvns	r3, r3
 8001322:	400b      	ands	r3, r1
 8001324:	001a      	movs	r2, r3
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	435b      	muls	r3, r3
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	434b      	muls	r3, r1
 800132e:	431a      	orrs	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	609a      	str	r2, [r3, #8]
}
 8001334:	46c0      	nop			@ (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b004      	add	sp, #16
 800133a:	bd80      	pop	{r7, pc}

0800133c <LL_GPIO_SetPinPull>:
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	68d9      	ldr	r1, [r3, #12]
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	435b      	muls	r3, r3
 8001350:	001a      	movs	r2, r3
 8001352:	0013      	movs	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	189b      	adds	r3, r3, r2
 8001358:	43db      	mvns	r3, r3
 800135a:	400b      	ands	r3, r1
 800135c:	001a      	movs	r2, r3
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	435b      	muls	r3, r3
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	434b      	muls	r3, r1
 8001366:	431a      	orrs	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	60da      	str	r2, [r3, #12]
}
 800136c:	46c0      	nop			@ (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b004      	add	sp, #16
 8001372:	bd80      	pop	{r7, pc}

08001374 <LL_GPIO_SetAFPin_0_7>:
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6a19      	ldr	r1, [r3, #32]
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	435b      	muls	r3, r3
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	4353      	muls	r3, r2
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	435a      	muls	r2, r3
 8001390:	0013      	movs	r3, r2
 8001392:	011b      	lsls	r3, r3, #4
 8001394:	1a9b      	subs	r3, r3, r2
 8001396:	43db      	mvns	r3, r3
 8001398:	400b      	ands	r3, r1
 800139a:	001a      	movs	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	435b      	muls	r3, r3
 80013a0:	68b9      	ldr	r1, [r7, #8]
 80013a2:	434b      	muls	r3, r1
 80013a4:	68b9      	ldr	r1, [r7, #8]
 80013a6:	434b      	muls	r3, r1
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	434b      	muls	r3, r1
 80013ac:	431a      	orrs	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	621a      	str	r2, [r3, #32]
}
 80013b2:	46c0      	nop			@ (mov r8, r8)
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b004      	add	sp, #16
 80013b8:	bd80      	pop	{r7, pc}

080013ba <LL_GPIO_SetAFPin_8_15>:
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	0a12      	lsrs	r2, r2, #8
 80013d2:	4353      	muls	r3, r2
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	0a12      	lsrs	r2, r2, #8
 80013d8:	4353      	muls	r3, r2
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	0a12      	lsrs	r2, r2, #8
 80013de:	435a      	muls	r2, r3
 80013e0:	0013      	movs	r3, r2
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	1a9b      	subs	r3, r3, r2
 80013e6:	43db      	mvns	r3, r3
 80013e8:	400b      	ands	r3, r1
 80013ea:	001a      	movs	r2, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	0a1b      	lsrs	r3, r3, #8
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	0a09      	lsrs	r1, r1, #8
 80013f4:	434b      	muls	r3, r1
 80013f6:	68b9      	ldr	r1, [r7, #8]
 80013f8:	0a09      	lsrs	r1, r1, #8
 80013fa:	434b      	muls	r3, r1
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	0a09      	lsrs	r1, r1, #8
 8001400:	434b      	muls	r3, r1
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	434b      	muls	r3, r1
 8001406:	431a      	orrs	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800140c:	46c0      	nop			@ (mov r8, r8)
 800140e:	46bd      	mov	sp, r7
 8001410:	b004      	add	sp, #16
 8001412:	bd80      	pop	{r7, pc}

08001414 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001422:	e048      	b.n	80014b6 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2101      	movs	r1, #1
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	4091      	lsls	r1, r2
 800142e:	000a      	movs	r2, r1
 8001430:	4013      	ands	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d03a      	beq.n	80014b0 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d003      	beq.n	800144a <LL_GPIO_Init+0x36>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d10e      	bne.n	8001468 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	68b9      	ldr	r1, [r7, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	0018      	movs	r0, r3
 8001454:	f7ff ff56 	bl	8001304 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	6819      	ldr	r1, [r3, #0]
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	0018      	movs	r0, r3
 8001464:	f7ff ff39 	bl	80012da <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	691a      	ldr	r2, [r3, #16]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	0018      	movs	r0, r3
 8001472:	f7ff ff63 	bl	800133c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d111      	bne.n	80014a2 <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	2bff      	cmp	r3, #255	@ 0xff
 8001482:	d807      	bhi.n	8001494 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	695a      	ldr	r2, [r3, #20]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	0018      	movs	r0, r3
 800148e:	f7ff ff71 	bl	8001374 <LL_GPIO_SetAFPin_0_7>
 8001492:	e006      	b.n	80014a2 <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	695a      	ldr	r2, [r3, #20]
 8001498:	68b9      	ldr	r1, [r7, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	0018      	movs	r0, r3
 800149e:	f7ff ff8c 	bl	80013ba <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	68b9      	ldr	r1, [r7, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	0018      	movs	r0, r3
 80014ac:	f7ff fef9 	bl	80012a2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	3301      	adds	r3, #1
 80014b4:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	40da      	lsrs	r2, r3
 80014be:	1e13      	subs	r3, r2, #0
 80014c0:	d1b0      	bne.n	8001424 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	0018      	movs	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b004      	add	sp, #16
 80014ca:	bd80      	pop	{r7, pc}

080014cc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80014d0:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <LL_RCC_HSI_IsReady+0x1c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2202      	movs	r2, #2
 80014d6:	4013      	ands	r3, r2
 80014d8:	3b02      	subs	r3, #2
 80014da:	425a      	negs	r2, r3
 80014dc:	4153      	adcs	r3, r2
 80014de:	b2db      	uxtb	r3, r3
}
 80014e0:	0018      	movs	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	46c0      	nop			@ (mov r8, r8)
 80014e8:	40021000 	.word	0x40021000

080014ec <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80014f0:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <LL_RCC_LSE_IsReady+0x1c>)
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	2202      	movs	r2, #2
 80014f6:	4013      	ands	r3, r2
 80014f8:	3b02      	subs	r3, #2
 80014fa:	425a      	negs	r2, r3
 80014fc:	4153      	adcs	r3, r2
 80014fe:	b2db      	uxtb	r3, r3
}
 8001500:	0018      	movs	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	40021000 	.word	0x40021000

0800150c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001510:	4b03      	ldr	r3, [pc, #12]	@ (8001520 <LL_RCC_GetSysClkSource+0x14>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	220c      	movs	r2, #12
 8001516:	4013      	ands	r3, r2
}
 8001518:	0018      	movs	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			@ (mov r8, r8)
 8001520:	40021000 	.word	0x40021000

08001524 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001528:	4b03      	ldr	r3, [pc, #12]	@ (8001538 <LL_RCC_GetAHBPrescaler+0x14>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	22f0      	movs	r2, #240	@ 0xf0
 800152e:	4013      	ands	r3, r2
}
 8001530:	0018      	movs	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	46c0      	nop			@ (mov r8, r8)
 8001538:	40021000 	.word	0x40021000

0800153c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001540:	4b03      	ldr	r3, [pc, #12]	@ (8001550 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	23e0      	movs	r3, #224	@ 0xe0
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	4013      	ands	r3, r2
}
 800154a:	0018      	movs	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40021000 	.word	0x40021000

08001554 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <LL_RCC_GetUSARTClockSource+0x24>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001560:	2103      	movs	r1, #3
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	4091      	lsls	r1, r2
 8001566:	000a      	movs	r2, r1
 8001568:	401a      	ands	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	061b      	lsls	r3, r3, #24
 800156e:	4313      	orrs	r3, r2
}
 8001570:	0018      	movs	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	b002      	add	sp, #8
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40021000 	.word	0x40021000

0800157c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001580:	4b03      	ldr	r3, [pc, #12]	@ (8001590 <LL_RCC_PLL_GetMainSource+0x14>)
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	2380      	movs	r3, #128	@ 0x80
 8001586:	025b      	lsls	r3, r3, #9
 8001588:	4013      	ands	r3, r2
}
 800158a:	0018      	movs	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40021000 	.word	0x40021000

08001594 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001598:	4b03      	ldr	r3, [pc, #12]	@ (80015a8 <LL_RCC_PLL_GetMultiplicator+0x14>)
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	23f0      	movs	r3, #240	@ 0xf0
 800159e:	039b      	lsls	r3, r3, #14
 80015a0:	4013      	ands	r3, r2
}
 80015a2:	0018      	movs	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40021000 	.word	0x40021000

080015ac <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80015b0:	4b03      	ldr	r3, [pc, #12]	@ (80015c0 <LL_RCC_PLL_GetPrediv+0x14>)
 80015b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b4:	220f      	movs	r2, #15
 80015b6:	4013      	ands	r3, r2
}
 80015b8:	0018      	movs	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	46c0      	nop			@ (mov r8, r8)
 80015c0:	40021000 	.word	0x40021000

080015c4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80015cc:	f000 f85a 	bl	8001684 <RCC_GetSystemClockFreq>
 80015d0:	0002      	movs	r2, r0
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	0018      	movs	r0, r3
 80015dc:	f000 f878 	bl	80016d0 <RCC_GetHCLKClockFreq>
 80015e0:	0002      	movs	r2, r0
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	0018      	movs	r0, r3
 80015ec:	f000 f886 	bl	80016fc <RCC_GetPCLK1ClockFreq>
 80015f0:	0002      	movs	r2, r0
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	609a      	str	r2, [r3, #8]
}
 80015f6:	46c0      	nop			@ (mov r8, r8)
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b002      	add	sp, #8
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d130      	bne.n	8001674 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	0018      	movs	r0, r3
 8001616:	f7ff ff9d 	bl	8001554 <LL_RCC_GetUSARTClockSource>
 800161a:	0003      	movs	r3, r0
 800161c:	2b03      	cmp	r3, #3
 800161e:	d00a      	beq.n	8001636 <LL_RCC_GetUSARTClockFreq+0x36>
 8001620:	d818      	bhi.n	8001654 <LL_RCC_GetUSARTClockFreq+0x54>
 8001622:	2b01      	cmp	r3, #1
 8001624:	d002      	beq.n	800162c <LL_RCC_GetUSARTClockFreq+0x2c>
 8001626:	2b02      	cmp	r3, #2
 8001628:	d00c      	beq.n	8001644 <LL_RCC_GetUSARTClockFreq+0x44>
 800162a:	e013      	b.n	8001654 <LL_RCC_GetUSARTClockFreq+0x54>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800162c:	f000 f82a 	bl	8001684 <RCC_GetSystemClockFreq>
 8001630:	0003      	movs	r3, r0
 8001632:	60fb      	str	r3, [r7, #12]
        break;
 8001634:	e01e      	b.n	8001674 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001636:	f7ff ff49 	bl	80014cc <LL_RCC_HSI_IsReady>
 800163a:	1e03      	subs	r3, r0, #0
 800163c:	d017      	beq.n	800166e <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <LL_RCC_GetUSARTClockFreq+0x80>)
 8001640:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001642:	e014      	b.n	800166e <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001644:	f7ff ff52 	bl	80014ec <LL_RCC_LSE_IsReady>
 8001648:	1e03      	subs	r3, r0, #0
 800164a:	d012      	beq.n	8001672 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 800164c:	2380      	movs	r3, #128	@ 0x80
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001652:	e00e      	b.n	8001672 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001654:	f000 f816 	bl	8001684 <RCC_GetSystemClockFreq>
 8001658:	0003      	movs	r3, r0
 800165a:	0018      	movs	r0, r3
 800165c:	f000 f838 	bl	80016d0 <RCC_GetHCLKClockFreq>
 8001660:	0003      	movs	r3, r0
 8001662:	0018      	movs	r0, r3
 8001664:	f000 f84a 	bl	80016fc <RCC_GetPCLK1ClockFreq>
 8001668:	0003      	movs	r3, r0
 800166a:	60fb      	str	r3, [r7, #12]
        break;
 800166c:	e002      	b.n	8001674 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 800166e:	46c0      	nop			@ (mov r8, r8)
 8001670:	e000      	b.n	8001674 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8001672:	46c0      	nop			@ (mov r8, r8)
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001674:	68fb      	ldr	r3, [r7, #12]
}
 8001676:	0018      	movs	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	b004      	add	sp, #16
 800167c:	bd80      	pop	{r7, pc}
 800167e:	46c0      	nop			@ (mov r8, r8)
 8001680:	007a1200 	.word	0x007a1200

08001684 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800168e:	f7ff ff3d 	bl	800150c <LL_RCC_GetSysClkSource>
 8001692:	0003      	movs	r3, r0
 8001694:	2b08      	cmp	r3, #8
 8001696:	d00b      	beq.n	80016b0 <RCC_GetSystemClockFreq+0x2c>
 8001698:	d80f      	bhi.n	80016ba <RCC_GetSystemClockFreq+0x36>
 800169a:	2b00      	cmp	r3, #0
 800169c:	d002      	beq.n	80016a4 <RCC_GetSystemClockFreq+0x20>
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d003      	beq.n	80016aa <RCC_GetSystemClockFreq+0x26>
 80016a2:	e00a      	b.n	80016ba <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80016a4:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <RCC_GetSystemClockFreq+0x48>)
 80016a6:	607b      	str	r3, [r7, #4]
      break;
 80016a8:	e00a      	b.n	80016c0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80016aa:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <RCC_GetSystemClockFreq+0x48>)
 80016ac:	607b      	str	r3, [r7, #4]
      break;
 80016ae:	e007      	b.n	80016c0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80016b0:	f000 f838 	bl	8001724 <RCC_PLL_GetFreqDomain_SYS>
 80016b4:	0003      	movs	r3, r0
 80016b6:	607b      	str	r3, [r7, #4]
      break;
 80016b8:	e002      	b.n	80016c0 <RCC_GetSystemClockFreq+0x3c>
      frequency = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80016ba:	4b04      	ldr	r3, [pc, #16]	@ (80016cc <RCC_GetSystemClockFreq+0x48>)
 80016bc:	607b      	str	r3, [r7, #4]
      break;
 80016be:	46c0      	nop			@ (mov r8, r8)
  }

  return frequency;
 80016c0:	687b      	ldr	r3, [r7, #4]
}
 80016c2:	0018      	movs	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b002      	add	sp, #8
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			@ (mov r8, r8)
 80016cc:	007a1200 	.word	0x007a1200

080016d0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80016d8:	f7ff ff24 	bl	8001524 <LL_RCC_GetAHBPrescaler>
 80016dc:	0003      	movs	r3, r0
 80016de:	091b      	lsrs	r3, r3, #4
 80016e0:	220f      	movs	r2, #15
 80016e2:	4013      	ands	r3, r2
 80016e4:	4a04      	ldr	r2, [pc, #16]	@ (80016f8 <RCC_GetHCLKClockFreq+0x28>)
 80016e6:	5cd3      	ldrb	r3, [r2, r3]
 80016e8:	001a      	movs	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	40d3      	lsrs	r3, r2
}
 80016ee:	0018      	movs	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b002      	add	sp, #8
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	46c0      	nop			@ (mov r8, r8)
 80016f8:	08001c70 	.word	0x08001c70

080016fc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001704:	f7ff ff1a 	bl	800153c <LL_RCC_GetAPB1Prescaler>
 8001708:	0003      	movs	r3, r0
 800170a:	0a1b      	lsrs	r3, r3, #8
 800170c:	4a04      	ldr	r2, [pc, #16]	@ (8001720 <RCC_GetPCLK1ClockFreq+0x24>)
 800170e:	5cd3      	ldrb	r3, [r2, r3]
 8001710:	001a      	movs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	40d3      	lsrs	r3, r2
}
 8001716:	0018      	movs	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	b002      	add	sp, #8
 800171c:	bd80      	pop	{r7, pc}
 800171e:	46c0      	nop			@ (mov r8, r8)
 8001720:	08001c80 	.word	0x08001c80

08001724 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	2300      	movs	r3, #0
 8001730:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001732:	f7ff ff23 	bl	800157c <LL_RCC_PLL_GetMainSource>
 8001736:	0003      	movs	r3, r0
 8001738:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	2380      	movs	r3, #128	@ 0x80
 8001744:	025b      	lsls	r3, r3, #9
 8001746:	429a      	cmp	r2, r3
 8001748:	d003      	beq.n	8001752 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 800174a:	e005      	b.n	8001758 <RCC_PLL_GetFreqDomain_SYS+0x34>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800174c:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <RCC_PLL_GetFreqDomain_SYS+0x68>)
 800174e:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001750:	e005      	b.n	800175e <RCC_PLL_GetFreqDomain_SYS+0x3a>
      pllinputfreq = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001752:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8001754:	607b      	str	r3, [r7, #4]
      break;
 8001756:	e002      	b.n	800175e <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8001758:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <RCC_PLL_GetFreqDomain_SYS+0x68>)
 800175a:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800175c:	46c0      	nop			@ (mov r8, r8)
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800175e:	f7ff ff25 	bl	80015ac <LL_RCC_PLL_GetPrediv>
 8001762:	0003      	movs	r3, r0
 8001764:	3301      	adds	r3, #1
 8001766:	0019      	movs	r1, r3
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f935 	bl	80019d8 <__aeabi_uidiv>
 800176e:	0003      	movs	r3, r0
 8001770:	001c      	movs	r4, r3
 8001772:	f7ff ff0f 	bl	8001594 <LL_RCC_PLL_GetMultiplicator>
 8001776:	0003      	movs	r3, r0
 8001778:	0c9b      	lsrs	r3, r3, #18
 800177a:	220f      	movs	r2, #15
 800177c:	4013      	ands	r3, r2
 800177e:	3302      	adds	r3, #2
 8001780:	4363      	muls	r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8001782:	0018      	movs	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	b003      	add	sp, #12
 8001788:	bd90      	pop	{r4, r7, pc}
 800178a:	46c0      	nop			@ (mov r8, r8)
 800178c:	003d0900 	.word	0x003d0900
 8001790:	007a1200 	.word	0x007a1200

08001794 <LL_USART_IsEnabled>:
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2201      	movs	r2, #1
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <LL_USART_IsEnabled+0x18>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <LL_USART_IsEnabled+0x1a>
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	0018      	movs	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	b002      	add	sp, #8
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <LL_USART_SetStopBitsLength>:
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	4a05      	ldr	r2, [pc, #20]	@ (80017dc <LL_USART_SetStopBitsLength+0x24>)
 80017c8:	401a      	ands	r2, r3
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	431a      	orrs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	605a      	str	r2, [r3, #4]
}
 80017d2:	46c0      	nop			@ (mov r8, r8)
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b002      	add	sp, #8
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			@ (mov r8, r8)
 80017dc:	ffffcfff 	.word	0xffffcfff

080017e0 <LL_USART_SetHWFlowCtrl>:
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	4a05      	ldr	r2, [pc, #20]	@ (8001804 <LL_USART_SetHWFlowCtrl+0x24>)
 80017f0:	401a      	ands	r2, r3
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	609a      	str	r2, [r3, #8]
}
 80017fa:	46c0      	nop			@ (mov r8, r8)
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b002      	add	sp, #8
 8001800:	bd80      	pop	{r7, pc}
 8001802:	46c0      	nop			@ (mov r8, r8)
 8001804:	fffffcff 	.word	0xfffffcff

08001808 <LL_USART_SetBaudRate>:
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	2380      	movs	r3, #128	@ 0x80
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	429a      	cmp	r2, r3
 800181e:	d11c      	bne.n	800185a <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	005a      	lsls	r2, r3, #1
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	085b      	lsrs	r3, r3, #1
 8001828:	18d3      	adds	r3, r2, r3
 800182a:	6839      	ldr	r1, [r7, #0]
 800182c:	0018      	movs	r0, r3
 800182e:	f000 f8d3 	bl	80019d8 <__aeabi_uidiv>
 8001832:	0003      	movs	r3, r0
 8001834:	b29b      	uxth	r3, r3
 8001836:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	4a10      	ldr	r2, [pc, #64]	@ (800187c <LL_USART_SetBaudRate+0x74>)
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	085b      	lsrs	r3, r3, #1
 8001844:	b29b      	uxth	r3, r3
 8001846:	001a      	movs	r2, r3
 8001848:	2307      	movs	r3, #7
 800184a:	4013      	ands	r3, r2
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	60da      	str	r2, [r3, #12]
}
 8001858:	e00c      	b.n	8001874 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	085a      	lsrs	r2, r3, #1
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	18d3      	adds	r3, r2, r3
 8001862:	6839      	ldr	r1, [r7, #0]
 8001864:	0018      	movs	r0, r3
 8001866:	f000 f8b7 	bl	80019d8 <__aeabi_uidiv>
 800186a:	0003      	movs	r3, r0
 800186c:	b29b      	uxth	r3, r3
 800186e:	001a      	movs	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	60da      	str	r2, [r3, #12]
}
 8001874:	46c0      	nop			@ (mov r8, r8)
 8001876:	46bd      	mov	sp, r7
 8001878:	b006      	add	sp, #24
 800187a:	bd80      	pop	{r7, pc}
 800187c:	0000fff0 	.word	0x0000fff0

08001880 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b089      	sub	sp, #36	@ 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800188a:	231f      	movs	r3, #31
 800188c:	18fb      	adds	r3, r7, r3
 800188e:	2201      	movs	r2, #1
 8001890:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	0018      	movs	r0, r3
 800189a:	f7ff ff7b 	bl	8001794 <LL_USART_IsEnabled>
 800189e:	1e03      	subs	r3, r0, #0
 80018a0:	d148      	bne.n	8001934 <LL_USART_Init+0xb4>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a27      	ldr	r2, [pc, #156]	@ (8001944 <LL_USART_Init+0xc4>)
 80018a8:	401a      	ands	r2, r3
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	6859      	ldr	r1, [r3, #4]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	4319      	orrs	r1, r3
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	4319      	orrs	r1, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	430b      	orrs	r3, r1
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	0011      	movs	r1, r2
 80018ce:	0018      	movs	r0, r3
 80018d0:	f7ff ff72 	bl	80017b8 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	695a      	ldr	r2, [r3, #20]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	0011      	movs	r1, r2
 80018dc:	0018      	movs	r0, r3
 80018de:	f7ff ff7f 	bl	80017e0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a18      	ldr	r2, [pc, #96]	@ (8001948 <LL_USART_Init+0xc8>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d105      	bne.n	80018f6 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80018ea:	2000      	movs	r0, #0
 80018ec:	f7ff fe88 	bl	8001600 <LL_RCC_GetUSARTClockFreq>
 80018f0:	0003      	movs	r3, r0
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	e00b      	b.n	800190e <LL_USART_Init+0x8e>
    }
#if defined(USART2)
    else if (USARTx == USART2)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a14      	ldr	r2, [pc, #80]	@ (800194c <LL_USART_Init+0xcc>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d107      	bne.n	800190e <LL_USART_Init+0x8e>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80018fe:	240c      	movs	r4, #12
 8001900:	193b      	adds	r3, r7, r4
 8001902:	0018      	movs	r0, r3
 8001904:	f7ff fe5e 	bl	80015c4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001908:	193b      	adds	r3, r7, r4
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00f      	beq.n	8001934 <LL_USART_Init+0xb4>
        && (USART_InitStruct->BaudRate != 0U))
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00b      	beq.n	8001934 <LL_USART_Init+0xb4>
    {
      status = SUCCESS;
 800191c:	231f      	movs	r3, #31
 800191e:	18fb      	adds	r3, r7, r3
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800192c:	69b9      	ldr	r1, [r7, #24]
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ff6a 	bl	8001808 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001934:	231f      	movs	r3, #31
 8001936:	18fb      	adds	r3, r7, r3
 8001938:	781b      	ldrb	r3, [r3, #0]
}
 800193a:	0018      	movs	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	b009      	add	sp, #36	@ 0x24
 8001940:	bd90      	pop	{r4, r7, pc}
 8001942:	46c0      	nop			@ (mov r8, r8)
 8001944:	ffff69f3 	.word	0xffff69f3
 8001948:	40013800 	.word	0x40013800
 800194c:	40004400 	.word	0x40004400

08001950 <rs_main>:



#[no_mangle]
pub extern "C" fn rs_main() -> !{
    loop {
 8001950:	e7fe      	b.n	8001950 <rs_main>
	...

08001954 <SysTick_Handler>:

static mut tickcnt :u32 = 0;

#[no_mangle]
//#[interrupt]
pub unsafe extern "C"  fn SysTick_Handler() {
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	tickcnt += 1;	
 8001958:	490b      	ldr	r1, [pc, #44]	@ (8001988 <SysTick_Handler+0x34>)
 800195a:	680a      	ldr	r2, [r1, #0]
 800195c:	2300      	movs	r3, #0
 800195e:	1c50      	adds	r0, r2, #1
 8001960:	415b      	adcs	r3, r3
 8001962:	4290      	cmp	r0, r2
 8001964:	d30d      	bcc.n	8001982 <SysTick_Handler+0x2e>
 8001966:	6008      	str	r0, [r1, #0]
 8001968:	4908      	ldr	r1, [pc, #32]	@ (800198c <SysTick_Handler+0x38>)
    if 0 == (tickcnt % 300) {
 800196a:	4341      	muls	r1, r0
 800196c:	2002      	movs	r0, #2
 800196e:	41c1      	rors	r1, r0
 8001970:	4807      	ldr	r0, [pc, #28]	@ (8001990 <SysTick_Handler+0x3c>)
 8001972:	4281      	cmp	r1, r0
 8001974:	d300      	bcc.n	8001978 <SysTick_Handler+0x24>
        cortex_m::peripheral::SCB::set_pendsv();
    }
}
 8001976:	bd80      	pop	{r7, pc}
 8001978:	2001      	movs	r0, #1
 800197a:	0700      	lsls	r0, r0, #28
 800197c:	4905      	ldr	r1, [pc, #20]	@ (8001994 <SysTick_Handler+0x40>)
            (
                addr: *mut () = dst as *mut (),
                align: usize = align_of::<T>(),
            ) => ub_checks::is_aligned_and_not_null(addr, align)
        );
        intrinsics::volatile_store(dst, src);
 800197e:	6008      	str	r0, [r1, #0]
 8001980:	bd80      	pop	{r7, pc}
	tickcnt += 1;	
 8001982:	4805      	ldr	r0, [pc, #20]	@ (8001998 <SysTick_Handler+0x44>)
 8001984:	f000 f816 	bl	80019b4 <_ZN4core9panicking11panic_const24panic_const_add_overflow17h9022cf1b0b180d21E>
 8001988:	2000002c 	.word	0x2000002c
 800198c:	962fc963 	.word	0x962fc963
 8001990:	00da740e 	.word	0x00da740e
 8001994:	e000ed04 	.word	0xe000ed04
 8001998:	08001cb4 	.word	0x08001cb4

0800199c <PendSV_Handler>:

#[no_mangle]
pub   extern "C" fn PendSV_Handler() {
	
}
 800199c:	4770      	bx	lr

0800199e <_ZN4core9panicking9panic_fmt17h631c75b7cf6ec204E>:
 800199e:	b580      	push	{r7, lr}
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	b084      	sub	sp, #16
 80019a4:	aa01      	add	r2, sp, #4
 80019a6:	2301      	movs	r3, #1
 80019a8:	8113      	strh	r3, [r2, #8]
 80019aa:	9102      	str	r1, [sp, #8]
 80019ac:	9001      	str	r0, [sp, #4]
 80019ae:	4610      	mov	r0, r2
 80019b0:	f000 f868 	bl	8001a84 <rust_begin_unwind>

080019b4 <_ZN4core9panicking11panic_const24panic_const_add_overflow17h9022cf1b0b180d21E>:
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	b086      	sub	sp, #24
 80019ba:	4601      	mov	r1, r0
 80019bc:	2000      	movs	r0, #0
 80019be:	9004      	str	r0, [sp, #16]
 80019c0:	2201      	movs	r2, #1
 80019c2:	9201      	str	r2, [sp, #4]
 80019c4:	4a03      	ldr	r2, [pc, #12]	@ (80019d4 <_ZN4core9panicking11panic_const24panic_const_add_overflow17h9022cf1b0b180d21E+0x20>)
 80019c6:	9200      	str	r2, [sp, #0]
 80019c8:	9003      	str	r0, [sp, #12]
 80019ca:	2004      	movs	r0, #4
 80019cc:	9002      	str	r0, [sp, #8]
 80019ce:	4668      	mov	r0, sp
 80019d0:	f7ff ffe5 	bl	800199e <_ZN4core9panicking9panic_fmt17h631c75b7cf6ec204E>
 80019d4:	08001ce0 	.word	0x08001ce0

080019d8 <__aeabi_uidiv>:
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
 80019dc:	f000 f853 	bl	8001a86 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E>
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <memset>:
 80019e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019e6:	af03      	add	r7, sp, #12
 80019e8:	b081      	sub	sp, #4
 80019ea:	2a10      	cmp	r2, #16
 80019ec:	d331      	bcc.n	8001a52 <memset+0x6e>
 80019ee:	4245      	negs	r5, r0
 80019f0:	2303      	movs	r3, #3
 80019f2:	401d      	ands	r5, r3
 80019f4:	1944      	adds	r4, r0, r5
 80019f6:	2d00      	cmp	r5, #0
 80019f8:	d010      	beq.n	8001a1c <memset+0x38>
 80019fa:	4606      	mov	r6, r0
 80019fc:	7031      	strb	r1, [r6, #0]
 80019fe:	1c76      	adds	r6, r6, #1
 8001a00:	42a6      	cmp	r6, r4
 8001a02:	d20b      	bcs.n	8001a1c <memset+0x38>
 8001a04:	7031      	strb	r1, [r6, #0]
 8001a06:	1c76      	adds	r6, r6, #1
 8001a08:	42a6      	cmp	r6, r4
 8001a0a:	d207      	bcs.n	8001a1c <memset+0x38>
 8001a0c:	7031      	strb	r1, [r6, #0]
 8001a0e:	1c76      	adds	r6, r6, #1
 8001a10:	42a6      	cmp	r6, r4
 8001a12:	d203      	bcs.n	8001a1c <memset+0x38>
 8001a14:	7031      	strb	r1, [r6, #0]
 8001a16:	1c76      	adds	r6, r6, #1
 8001a18:	42a6      	cmp	r6, r4
 8001a1a:	d3ef      	bcc.n	80019fc <memset+0x18>
 8001a1c:	1b52      	subs	r2, r2, r5
 8001a1e:	4616      	mov	r6, r2
 8001a20:	439e      	bics	r6, r3
 8001a22:	19a5      	adds	r5, r4, r6
 8001a24:	2e01      	cmp	r6, #1
 8001a26:	db10      	blt.n	8001a4a <memset+0x66>
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	b2cb      	uxtb	r3, r1
 8001a2c:	4e14      	ldr	r6, [pc, #80]	@ (8001a80 <memset+0x9c>)
 8001a2e:	435e      	muls	r6, r3
 8001a30:	9b00      	ldr	r3, [sp, #0]
 8001a32:	c440      	stmia	r4!, {r6}
 8001a34:	42ac      	cmp	r4, r5
 8001a36:	d208      	bcs.n	8001a4a <memset+0x66>
 8001a38:	c440      	stmia	r4!, {r6}
 8001a3a:	42ac      	cmp	r4, r5
 8001a3c:	d205      	bcs.n	8001a4a <memset+0x66>
 8001a3e:	c440      	stmia	r4!, {r6}
 8001a40:	42ac      	cmp	r4, r5
 8001a42:	d202      	bcs.n	8001a4a <memset+0x66>
 8001a44:	c440      	stmia	r4!, {r6}
 8001a46:	42ac      	cmp	r4, r5
 8001a48:	d3f3      	bcc.n	8001a32 <memset+0x4e>
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	2a00      	cmp	r2, #0
 8001a4e:	d103      	bne.n	8001a58 <memset+0x74>
 8001a50:	e013      	b.n	8001a7a <memset+0x96>
 8001a52:	4605      	mov	r5, r0
 8001a54:	2a00      	cmp	r2, #0
 8001a56:	d010      	beq.n	8001a7a <memset+0x96>
 8001a58:	18aa      	adds	r2, r5, r2
 8001a5a:	7029      	strb	r1, [r5, #0]
 8001a5c:	1c6b      	adds	r3, r5, #1
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d20b      	bcs.n	8001a7a <memset+0x96>
 8001a62:	7019      	strb	r1, [r3, #0]
 8001a64:	1c5b      	adds	r3, r3, #1
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d207      	bcs.n	8001a7a <memset+0x96>
 8001a6a:	7019      	strb	r1, [r3, #0]
 8001a6c:	1c5b      	adds	r3, r3, #1
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d203      	bcs.n	8001a7a <memset+0x96>
 8001a72:	7019      	strb	r1, [r3, #0]
 8001a74:	1c5d      	adds	r5, r3, #1
 8001a76:	4295      	cmp	r5, r2
 8001a78:	d3ef      	bcc.n	8001a5a <memset+0x76>
 8001a7a:	b001      	add	sp, #4
 8001a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a7e:	46c0      	nop			@ (mov r8, r8)
 8001a80:	01010101 	.word	0x01010101

08001a84 <rust_begin_unwind>:


#[cfg(not(test))]
#[panic_handler]
fn panic(_info: &core::panic::PanicInfo) -> ! {
    loop {}
 8001a84:	e7fe      	b.n	8001a84 <rust_begin_unwind>

08001a86 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E>:
 8001a86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a88:	af03      	add	r7, sp, #12
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	4288      	cmp	r0, r1
 8001a90:	d203      	bcs.n	8001a9a <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x14>
 8001a92:	2000      	movs	r0, #0
 8001a94:	4611      	mov	r1, r2
 8001a96:	b003      	add	sp, #12
 8001a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a9a:	0c14      	lsrs	r4, r2, #16
 8001a9c:	42a1      	cmp	r1, r4
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	d939      	bls.n	8001b16 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x90>
 8001aa2:	0a06      	lsrs	r6, r0, #8
 8001aa4:	42b1      	cmp	r1, r6
 8001aa6:	d93a      	bls.n	8001b1e <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x98>
 8001aa8:	0903      	lsrs	r3, r0, #4
 8001aaa:	4299      	cmp	r1, r3
 8001aac:	d93b      	bls.n	8001b26 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0xa0>
 8001aae:	9301      	str	r3, [sp, #4]
 8001ab0:	0883      	lsrs	r3, r0, #2
 8001ab2:	4299      	cmp	r1, r3
 8001ab4:	d800      	bhi.n	8001ab8 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x32>
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	9302      	str	r3, [sp, #8]
 8001aba:	0843      	lsrs	r3, r0, #1
 8001abc:	2501      	movs	r5, #1
 8001abe:	2000      	movs	r0, #0
 8001ac0:	4299      	cmp	r1, r3
 8001ac2:	462b      	mov	r3, r5
 8001ac4:	d900      	bls.n	8001ac8 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x42>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	42a1      	cmp	r1, r4
 8001aca:	462c      	mov	r4, r5
 8001acc:	d900      	bls.n	8001ad0 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x4a>
 8001ace:	4604      	mov	r4, r0
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	0124      	lsls	r4, r4, #4
 8001ad4:	42b1      	cmp	r1, r6
 8001ad6:	462e      	mov	r6, r5
 8001ad8:	d900      	bls.n	8001adc <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x56>
 8001ada:	4606      	mov	r6, r0
 8001adc:	00f3      	lsls	r3, r6, #3
 8001ade:	191c      	adds	r4, r3, r4
 8001ae0:	9b01      	ldr	r3, [sp, #4]
 8001ae2:	4299      	cmp	r1, r3
 8001ae4:	462b      	mov	r3, r5
 8001ae6:	d900      	bls.n	8001aea <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x64>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	18e3      	adds	r3, r4, r3
 8001aee:	9c02      	ldr	r4, [sp, #8]
 8001af0:	42a1      	cmp	r1, r4
 8001af2:	462c      	mov	r4, r5
 8001af4:	d900      	bls.n	8001af8 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x72>
 8001af6:	4604      	mov	r4, r0
 8001af8:	0060      	lsls	r0, r4, #1
 8001afa:	1818      	adds	r0, r3, r0
 8001afc:	9b00      	ldr	r3, [sp, #0]
 8001afe:	18c3      	adds	r3, r0, r3
 8001b00:	409d      	lsls	r5, r3
 8001b02:	460c      	mov	r4, r1
 8001b04:	409c      	lsls	r4, r3
 8001b06:	1b16      	subs	r6, r2, r4
 8001b08:	428e      	cmp	r6, r1
 8001b0a:	d212      	bcs.n	8001b32 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0xac>
 8001b0c:	4632      	mov	r2, r6
 8001b0e:	4628      	mov	r0, r5
 8001b10:	4611      	mov	r1, r2
 8001b12:	b003      	add	sp, #12
 8001b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b16:	4620      	mov	r0, r4
 8001b18:	0a06      	lsrs	r6, r0, #8
 8001b1a:	42b1      	cmp	r1, r6
 8001b1c:	d8c4      	bhi.n	8001aa8 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x22>
 8001b1e:	4630      	mov	r0, r6
 8001b20:	0903      	lsrs	r3, r0, #4
 8001b22:	4299      	cmp	r1, r3
 8001b24:	d8c3      	bhi.n	8001aae <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x28>
 8001b26:	4618      	mov	r0, r3
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	0883      	lsrs	r3, r0, #2
 8001b2c:	4299      	cmp	r1, r3
 8001b2e:	d9c2      	bls.n	8001ab6 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x30>
 8001b30:	e7c2      	b.n	8001ab8 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x32>
 8001b32:	2c00      	cmp	r4, #0
 8001b34:	d403      	bmi.n	8001b3e <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0xb8>
 8001b36:	4629      	mov	r1, r5
 8001b38:	4628      	mov	r0, r5
 8001b3a:	4632      	mov	r2, r6
 8001b3c:	e015      	b.n	8001b6a <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0xe4>
 8001b3e:	0864      	lsrs	r4, r4, #1
 8001b40:	1b32      	subs	r2, r6, r4
 8001b42:	1e5b      	subs	r3, r3, #1
 8001b44:	201f      	movs	r0, #31
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	4018      	ands	r0, r3
 8001b4a:	9002      	str	r0, [sp, #8]
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	9b02      	ldr	r3, [sp, #8]
 8001b50:	4098      	lsls	r0, r3
 8001b52:	2a00      	cmp	r2, #0
 8001b54:	9002      	str	r0, [sp, #8]
 8001b56:	da00      	bge.n	8001b5a <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0xd4>
 8001b58:	2000      	movs	r0, #0
 8001b5a:	2a00      	cmp	r2, #0
 8001b5c:	da00      	bge.n	8001b60 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0xda>
 8001b5e:	4632      	mov	r2, r6
 8001b60:	4328      	orrs	r0, r5
 8001b62:	428a      	cmp	r2, r1
 8001b64:	9902      	ldr	r1, [sp, #8]
 8001b66:	9b01      	ldr	r3, [sp, #4]
 8001b68:	d394      	bcc.n	8001a94 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0xe>
 8001b6a:	1e49      	subs	r1, r1, #1
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00b      	beq.n	8001b88 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x102>
 8001b70:	2603      	movs	r6, #3
 8001b72:	401e      	ands	r6, r3
 8001b74:	d00a      	beq.n	8001b8c <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x106>
 8001b76:	0055      	lsls	r5, r2, #1
 8001b78:	1b2a      	subs	r2, r5, r4
 8001b7a:	1c52      	adds	r2, r2, #1
 8001b7c:	d400      	bmi.n	8001b80 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0xfa>
 8001b7e:	4615      	mov	r5, r2
 8001b80:	2e01      	cmp	r6, #1
 8001b82:	d106      	bne.n	8001b92 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x10c>
 8001b84:	1e5a      	subs	r2, r3, #1
 8001b86:	e013      	b.n	8001bb0 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x12a>
 8001b88:	4615      	mov	r5, r2
 8001b8a:	e013      	b.n	8001bb4 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x12e>
 8001b8c:	4615      	mov	r5, r2
 8001b8e:	461a      	mov	r2, r3
 8001b90:	e00e      	b.n	8001bb0 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x12a>
 8001b92:	006d      	lsls	r5, r5, #1
 8001b94:	1b2a      	subs	r2, r5, r4
 8001b96:	1c52      	adds	r2, r2, #1
 8001b98:	d400      	bmi.n	8001b9c <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x116>
 8001b9a:	4615      	mov	r5, r2
 8001b9c:	2e02      	cmp	r6, #2
 8001b9e:	d101      	bne.n	8001ba4 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x11e>
 8001ba0:	1e9a      	subs	r2, r3, #2
 8001ba2:	e005      	b.n	8001bb0 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x12a>
 8001ba4:	006d      	lsls	r5, r5, #1
 8001ba6:	1b2a      	subs	r2, r5, r4
 8001ba8:	1c52      	adds	r2, r2, #1
 8001baa:	d400      	bmi.n	8001bae <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x128>
 8001bac:	4615      	mov	r5, r2
 8001bae:	1eda      	subs	r2, r3, #3
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d20a      	bcs.n	8001bca <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x144>
 8001bb4:	221f      	movs	r2, #31
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	462a      	mov	r2, r5
 8001bba:	40da      	lsrs	r2, r3
 8001bbc:	4029      	ands	r1, r5
 8001bbe:	4308      	orrs	r0, r1
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	b003      	add	sp, #12
 8001bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bc6:	1f12      	subs	r2, r2, #4
 8001bc8:	d0f4      	beq.n	8001bb4 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x12e>
 8001bca:	006d      	lsls	r5, r5, #1
 8001bcc:	1b2e      	subs	r6, r5, r4
 8001bce:	1c76      	adds	r6, r6, #1
 8001bd0:	d50c      	bpl.n	8001bec <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x166>
 8001bd2:	006d      	lsls	r5, r5, #1
 8001bd4:	1b2e      	subs	r6, r5, r4
 8001bd6:	1c76      	adds	r6, r6, #1
 8001bd8:	d50d      	bpl.n	8001bf6 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x170>
 8001bda:	006d      	lsls	r5, r5, #1
 8001bdc:	1b2e      	subs	r6, r5, r4
 8001bde:	1c76      	adds	r6, r6, #1
 8001be0:	d50e      	bpl.n	8001c00 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x17a>
 8001be2:	006d      	lsls	r5, r5, #1
 8001be4:	1b2e      	subs	r6, r5, r4
 8001be6:	1c76      	adds	r6, r6, #1
 8001be8:	d4ed      	bmi.n	8001bc6 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x140>
 8001bea:	e00e      	b.n	8001c0a <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x184>
 8001bec:	4635      	mov	r5, r6
 8001bee:	006d      	lsls	r5, r5, #1
 8001bf0:	1b2e      	subs	r6, r5, r4
 8001bf2:	1c76      	adds	r6, r6, #1
 8001bf4:	d4f1      	bmi.n	8001bda <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x154>
 8001bf6:	4635      	mov	r5, r6
 8001bf8:	006d      	lsls	r5, r5, #1
 8001bfa:	1b2e      	subs	r6, r5, r4
 8001bfc:	1c76      	adds	r6, r6, #1
 8001bfe:	d4f0      	bmi.n	8001be2 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x15c>
 8001c00:	4635      	mov	r5, r6
 8001c02:	006d      	lsls	r5, r5, #1
 8001c04:	1b2e      	subs	r6, r5, r4
 8001c06:	1c76      	adds	r6, r6, #1
 8001c08:	d4dd      	bmi.n	8001bc6 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x140>
 8001c0a:	4635      	mov	r5, r6
 8001c0c:	e7db      	b.n	8001bc6 <_ZN17compiler_builtins3int19specialized_div_rem11u32_div_rem17h7403b13da29f6d85E+0x140>
	...

08001c10 <__libc_init_array>:
 8001c10:	b570      	push	{r4, r5, r6, lr}
 8001c12:	2600      	movs	r6, #0
 8001c14:	4c0c      	ldr	r4, [pc, #48]	@ (8001c48 <__libc_init_array+0x38>)
 8001c16:	4d0d      	ldr	r5, [pc, #52]	@ (8001c4c <__libc_init_array+0x3c>)
 8001c18:	1b64      	subs	r4, r4, r5
 8001c1a:	10a4      	asrs	r4, r4, #2
 8001c1c:	42a6      	cmp	r6, r4
 8001c1e:	d109      	bne.n	8001c34 <__libc_init_array+0x24>
 8001c20:	2600      	movs	r6, #0
 8001c22:	f000 f819 	bl	8001c58 <_init>
 8001c26:	4c0a      	ldr	r4, [pc, #40]	@ (8001c50 <__libc_init_array+0x40>)
 8001c28:	4d0a      	ldr	r5, [pc, #40]	@ (8001c54 <__libc_init_array+0x44>)
 8001c2a:	1b64      	subs	r4, r4, r5
 8001c2c:	10a4      	asrs	r4, r4, #2
 8001c2e:	42a6      	cmp	r6, r4
 8001c30:	d105      	bne.n	8001c3e <__libc_init_array+0x2e>
 8001c32:	bd70      	pop	{r4, r5, r6, pc}
 8001c34:	00b3      	lsls	r3, r6, #2
 8001c36:	58eb      	ldr	r3, [r5, r3]
 8001c38:	4798      	blx	r3
 8001c3a:	3601      	adds	r6, #1
 8001c3c:	e7ee      	b.n	8001c1c <__libc_init_array+0xc>
 8001c3e:	00b3      	lsls	r3, r6, #2
 8001c40:	58eb      	ldr	r3, [r5, r3]
 8001c42:	4798      	blx	r3
 8001c44:	3601      	adds	r6, #1
 8001c46:	e7f2      	b.n	8001c2e <__libc_init_array+0x1e>
 8001c48:	08001cf0 	.word	0x08001cf0
 8001c4c:	08001cf0 	.word	0x08001cf0
 8001c50:	08001cf4 	.word	0x08001cf4
 8001c54:	08001cf0 	.word	0x08001cf0

08001c58 <_init>:
 8001c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c5e:	bc08      	pop	{r3}
 8001c60:	469e      	mov	lr, r3
 8001c62:	4770      	bx	lr

08001c64 <_fini>:
 8001c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c66:	46c0      	nop			@ (mov r8, r8)
 8001c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c6a:	bc08      	pop	{r3}
 8001c6c:	469e      	mov	lr, r3
 8001c6e:	4770      	bx	lr
